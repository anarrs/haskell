
==================== FINAL INTERFACE ====================
2016-05-21 20:51:43.289112 UTC

interface main@main:Main [family instance module] 7103
  interface hash: d5421e7340b365e9500ff53285e4ea60
  ABI hash: 9ddafa4cb7623ad3cca2b11077376b90
  export-list hash: b9d3dc777a3d498da8c313faaac6b874
  orphan hash: 3e320dc3eca0e3faae4ed7bb7b7452f8
  flag hash: 2b902f1b49712d85952e752b7536fd12
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
module dependencies:
package dependencies: aeson-0.9.0.1@aeson_DFvprtDBUdB2suCwa7lgtv
                      aeson-compat-0.3.2.0@aeson_I6sLdLpsTWlBpPQ6k8hVao
                      ansi-terminal-0.6.2.3@ansit_BDlVdfJGo3VHCIHxPTNjH1
                      appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3
                      auto-update-0.1.3.1@autou_JxODiy791X7A5hkNmGN2Ed base-4.8.2.0
                      base64-bytestring-1.0.0.1@base6_AkCk8zInckjJsyQ4AIFHPN
                      base-compat-0.9.1@basec_3Zy8UsyHmBEEwbReR8x1KT
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-html-0.8.1.1@blaze_1fCoF4onMJE2jDLBViwynk
                      blaze-builder-0.4.0.2@blaze_5LQurmvTy7l9rPlWgPlNE4
                      blaze-markup-0.7.0.3@blaze_JGtgJgx8yqB3DdKuU3sbgD
                      byteable-0.1.1@bytea_38yjJsjDRm9KusCn8Yo4aB
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_8joO9kPGMysIcGsv22FmhM
                      cereal-0.5.1.0@cerea_843xOxvPj94HAJ9SD4EJuq
                      cipher-aes-0.2.11@ciphe_8XNwNKI71EdCLNQ4WGdMQq
                      clientsession-0.9.1.1@clien_5voyFsgo1EG4Zcy2KTreld
                      conduit-1.2.6.4@condu_1EneW8yRsjj18l2EfcgLyu
                      conduit-extra-1.1.13.1@condu_K5a53Tkcwf93kOHQXIVa9v
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      cookie-0.4.2@cooki_HgYmE0LnTLQI3ZHrNmxIUf
                      cprng-aes-0.6.1@cprng_FqpwhJtWO8g27pB5PJZtIq
                      crypto-api-0.13.2@crypt_2BEYKdRP8nrKGHynW1FWqA
                      crypto-random-0.0.9@crypt_7BiCOK9v78J36YeClUc9KE
                      crypto-cipher-types-0.0.9@crypt_AkbdiYWeXYI5D4jAOMIXve
                      css-text-0.1.2.1@csste_DCmJgQlbndx5J1dp3gjSY0
                      data-default-instances-base-0.0.1@datad_Bh5w1rt638k3gekgUnZ9Qe
                      data-default-0.5.3@datad_DLQPsKM7BNMFfKH45X8LEe
                      data-default-instances-dlist-0.0.1@datad_IV2dTGx3Pj09NowR0FWGzk
                      data-default-instances-containers-0.0.1@datad_IvTKAI579b047LLJfQOYbY
                      data-default-class-0.0.1@datad_K91y8NcZUJI9yaBI61rgdD
                      data-default-instances-old-locale-0.0.1@datad_LQTewb1b5hK22W4h2rIWVQ
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      easy-file-0.2.1@easyf_IjQ6MMskJyDEpOwcfCdF0G
                      email-validate-2.2.0@email_852PUaAoFuMCJCuSp1iWYg
                      entropy-0.3.7@entro_7gYJ61Ci0NNBp8LB4CGmrG
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      fast-logger-2.4.6@fastl_KMBm1wib7WxH7JFI30qQWK
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I
                      http2-1.4.5@http2_DoxR3dWy5TOCdpHywL3J3q
                      http-api-data-0.2.2@httpa_3kiLcpdXTUe4CYRpIoinpP
                      http-date-0.0.6.1@httpd_5DCnWjYhsQa9SYTqbDecLX
                      http-types-0.9@httpt_GVuxyBdW2yt88cWrjZfRWC integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT
                      lifted-base-0.2.3.6@lifte_DoOvgrTvmEtENHs0ypaZTR
                      memory-0.11@memor_0EiEBIg44i8KGjAeoKnPDs
                      mmorph-1.0.6@mmorp_42KUkOfzC6q3qCtAMiSHam
                      monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS
                      monad-logger-0.3.18@monad_DplboDcgaIp5GDn1eIRaIl
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl
                      path-pieces-0.2.1@pathp_4qW9xznk5mC6aJZVVgmWEO
                      persistent-template-2.1.8@persi_0uf4NO45qsn3LhXe0qr3aV
                      persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ
                      persistent-postgresql-2.2.2@persi_KIHLNUKVv5r5BbPzlHVlMo
                      postgresql-libpq-0.9.1.1@postg_6f9D1As2FCe0fjZpXXvHvS
                      postgresql-simple-0.5.1.3@postg_9hhNYLG1RxhIG50wjKKMiI
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      psqueues-0.2.2.1@psque_AvLcbKUIB1yCm8wZoS0YR7
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      resourcet-1.1.7.3@resou_0TYP6GHqv9b1qNv0xS98eJ
                      resource-pool-0.2.3.2@resou_BPzNUl5kJsI1qo7V284Tgq
                      safe-0.3.9@safe_Eus5OohxO2XHvdWxKAmhFS
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      securemem-0.1.9@secur_ArobkR9k7uwJiSXmFUrDYT
                      semigroups-0.18.1@semig_G8J7ers5FBV50jV0jAmDo0
                      shakespeare-2.0.8.2@shake_7VYGAcSKdrrBmHx0MGxhaZ
                      silently-1.2.5@silen_5nVdOe0bUXfLPEbxHJT4m4
                      simple-sendfile-0.2.21@simpl_1s4YZSsjn6TCbK7MVn1EXz
                      skein-1.0.9.4@skein_Er8QdQfWtp79PgFByyaiMF
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      stm-chans-3.0.0.4@stmch_4ac5OLG4E0w1rpuIDCribD
                      streaming-commons-0.1.15.4@strea_FDgjqa6CVPZ2zy4YbsUfKW
                      stringsearch-0.3.6.6@strin_CAOAc0sCfAC9gi7YClo2KY
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      tagsoup-0.13.9@tagso_3I5x83DoCVBIz4INMBLU3R
                      template-haskell-2.10.0.0 text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      time-locale-compat-0.1.1.1@timel_Ciz7M1U3da73rRwCjRF3Np
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unix-compat-0.4.1.4@unixc_Km8uiabmElX5mrb8D4Fywe
                      unix-time-0.3.6@unixt_4DXmhADld9WFju1Q636Hdx
                      unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr
                      vault-0.3.0.6@vault_8aId1RjvIBs9AcRd6Dlytd
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      wai-3.2.1@wai_0sX35KG3ls0DbfkAiL2KUt
                      wai-extra-3.0.15.1@waiex_1Kfq3nRHfBG7JoWSrU44n9
                      wai-logger-2.2.7@wailo_JJCKUe8HLi58dVsvVHz4QA
                      warp-3.2.2@warp_AahrN39wH0hHc9O5rjZ6vl
                      word8-0.1.2@word8_6yKBsGbmsbLB2UCORShr75
                      xss-sanitize-0.3.5.7@xsssa_1xOkYBWysHDFpCHMd3AfbR
                      yesod-1.4.3@yesod_0P1Pl62OCYf0oXSQsj4a0h
                      yesod-persistent-1.4.0.5@yesod_3Gw3CkJUHW6FbRNPXpFlNo
                      yesod-form-1.4.7.1@yesod_5ek34q43moO3RSseC9NA91
                      yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
orphans: aeson-0.9.0.1@aeson_DFvprtDBUdB2suCwa7lgtv:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_DFvprtDBUdB2suCwa7lgtv:Data.Aeson.Types.Instances
         aeson-compat-0.3.2.0@aeson_I6sLdLpsTWlBpPQ6k8hVao:Data.Aeson.Compat
         attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         crypto-api-0.13.2@crypt_2BEYKdRP8nrKGHynW1FWqA:Crypto.Classes
         data-default-instances-base-0.0.1@datad_Bh5w1rt638k3gekgUnZ9Qe:Data.Default.Instances.Base
         data-default-instances-dlist-0.0.1@datad_IV2dTGx3Pj09NowR0FWGzk:Data.Default.Instances.DList
         data-default-instances-containers-0.0.1@datad_IvTKAI579b047LLJfQOYbY:Data.Default.Instances.Containers
         data-default-instances-old-locale-0.0.1@datad_LQTewb1b5hK22W4h2rIWVQ:Data.Default.Instances.OldLocale
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         persistent-template-2.1.8@persi_0uf4NO45qsn3LhXe0qr3aV:Database.Persist.TH
         persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Orphan.PersistUnique
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         unix-time-0.3.6@unixt_4DXmhADld9WFju1Q636Hdx:Data.UnixTime.Diff
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         email-validate-2.2.0@email_852PUaAoFuMCJCuSp1iWYg:Text.Email.Parser
                         iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT:Data.IP.Addr
                         iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT:Data.IP.Range
                         monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS:Control.Monad.Trans.Control
                         monad-logger-0.3.18@monad_DplboDcgaIp5GDn1eIRaIl:Control.Monad.Logger
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67:Network.URI
                         persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Class.PersistConfig
                         persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Orphan.PersistStore
                         persistent-postgresql-2.2.2@persi_KIHLNUKVv5r5BbPzlHVlMo:Database.Persist.Postgresql
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         resourcet-1.1.7.3@resou_0TYP6GHqv9b1qNv0xS98eJ:Control.Monad.Trans.Resource.Internal
                         semigroups-0.18.1@semig_G8J7ers5FBV50jV0jAmDo0:Data.List.NonEmpty
                         semigroups-0.18.1@semig_G8J7ers5FBV50jV0jAmDo0:Data.Semigroup
                         shakespeare-2.0.8.2@shake_7VYGAcSKdrrBmHx0MGxhaZ:Text.Css
                         shakespeare-2.0.8.2@shake_7VYGAcSKdrrBmHx0MGxhaZ:Text.Shakespeare
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashSet
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Class.Handler
                         yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Internal.LiteApp
                         yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Types
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  aeson-0.9.0.1@aeson_DFvprtDBUdB2suCwa7lgtv:Data.Aeson.Types.Class b6061569d1ac2b8df81c6ec7ca9cdafa
import  -/  aeson-0.9.0.1@aeson_DFvprtDBUdB2suCwa7lgtv:Data.Aeson.Types.Instances 22388f4dcc0a7465444ae51559542a7e
import  -/  aeson-0.9.0.1@aeson_DFvprtDBUdB2suCwa7lgtv:Data.Aeson.Types.Internal 532cd4996965e5bb04b875eb94accd47
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.Proxy ace6418f386b055d277aea86443e836b
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Int 28d8a9f7cfc272358fb4631d98c579ce
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  blaze-html-0.8.1.1@blaze_1fCoF4onMJE2jDLBViwynk:Text.Blaze.Html dcd84e6a1095a3bbd6a32bcf6f207e70
import  -/  blaze-markup-0.7.0.3@blaze_JGtgJgx8yqB3DdKuU3sbgD:Text.Blaze.Internal 695ee1760d4a7ba45b41439e146f60cb
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Internal dfa34e211eb5d18268ce7a397234e851
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 642e37808d03e24efbe8e8ff1336f343
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base 681af891dffe392ee938c8b49d69f236
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  http-api-data-0.2.2@httpa_3kiLcpdXTUe4CYRpIoinpP:Web.HttpApiData.Internal d4a95ffe9919bf31bb4c3c3a73306e22
import  -/  monad-logger-0.3.18@monad_DplboDcgaIp5GDn1eIRaIl:Control.Monad.Logger d1fd481a32b7726d109c507dac33705b
import  -/  path-pieces-0.2.1@pathp_4qW9xznk5mC6aJZVVgmWEO:Web.PathPieces e7a246921fcfef213af85b6de92fc54c
import  -/  persistent-template-2.1.8@persi_0uf4NO45qsn3LhXe0qr3aV:Database.Persist.TH 9f0be5113b0f0c2c86cbe61b5213d5cb
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist f1ae3ebda3dcdb95193a9e5ade7e46aa
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Class.PersistEntity 888942c9a2c3e72622f5cea89d5b0e70
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Class.PersistField d4fe87191fdd1be0e67bd201a9e47640
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Class.PersistQuery 8ac74d5349755417a8eb61f22a71d2df
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Class.PersistStore 3979b6a0e21835d43cbeb1f7386f78f4
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Class 1f8e2fa4b0fc129a9efa3b5bac124229
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Migration 960a94792e38b344046de4193d428fa3
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Orphan.PersistStore c8553033a1289aca6a44b2ce61e6ebea
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Run a74927a08ae9e175bbb412226c283a36
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Sql.Types 74728190f94e1b6a38f7df73c9a0befb
import  -/  persistent-2.2.4.1@persi_88ONQKHFQjlL8JNQ5anfTZ:Database.Persist.Types.Base ecd56765418db3ebccba65548b01dde8
import  -/  persistent-postgresql-2.2.2@persi_KIHLNUKVv5r5BbPzlHVlMo:Database.Persist.Postgresql ed2e6bcdb2418bdc1a5eb54fa833c616
import  -/  shakespeare-2.0.8.2@shake_7VYGAcSKdrrBmHx0MGxhaZ:Text.Shakespeare.I18N 73c3e92b4bb71d65887b97aff47f4276
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 677c532e2dd56476a11a0a8a53880ce7
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show 081cc243e944015e37c793c3b0ebfefd
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.IO.Class 37487179a2f5eb2ea7922b911abcae56
import  -/  unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base 382e2d511fbf53f3ec913fb766517aef
import  -/  unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Strict 7b909ae7e2f8d6f19a785f420e689251
import  -/  wai-3.2.1@wai_0sX35KG3ls0DbfkAiL2KUt:Network.Wai.Internal f1a685b41c2884d9d2779e47213c3c44
import  -/  yesod-1.4.3@yesod_0P1Pl62OCYf0oXSQsj4a0h:Yesod 886e0cfa4b08e724ebcc2653f1c6dee9
import  -/  yesod-persistent-1.4.0.5@yesod_3Gw3CkJUHW6FbRNPXpFlNo:Yesod.Persist.Core 622bbe417c94177727f9d110db473fbc
import  -/  yesod-form-1.4.7.1@yesod_5ek34q43moO3RSseC9NA91:Yesod.Form.Fields 8d0a500fe7f2f959fbacc7bc5e7f6e08
import  -/  yesod-form-1.4.7.1@yesod_5ek34q43moO3RSseC9NA91:Yesod.Form.Functions 3a7594ae1c55e110244cf55e33c6f01a
import  -/  yesod-form-1.4.7.1@yesod_5ek34q43moO3RSseC9NA91:Yesod.Form.Types cd727c829d3c86b8f4c8522b11642b4f
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Class.Dispatch 58e71f8fa2a2cea894384c60dbbd6680
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Class.Yesod df80856b3c569eeca53eb6fade4b582e
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Dispatch 69b08acfb46b5b688b7dae1e0db83266
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Handler 4d79eaeba9b44632b404b7e7a446220f
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Internal.Run 7a6de7fe1e53f8c5509e61bbe0d0ff3c
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Internal.TH 1e11ab45d63718b1a40567789542065c
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Types 9722505ca216d19a05658c63d52c563d
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Core.Widget a261d0cdc2bb7263f6c7322e86fbf465
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Routes.Class da159d556fc00e55b25adfeb6558d967
import  -/  yesod-core-1.4.20.2@yesod_5xqR9n3NrUaCenH1Z36eFD:Yesod.Routes.TH.Types 0c4cbf44fab3288288b9e1aebba6a535
addDependentFile "/home/ubuntu/.stack/programs/x86_64-linux/ghc-7.10.3/lib/ghc-7.10.3/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.22.5.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
c92d59ccce001a0196410776041b6e0e
  $fEqKey ::
    GHC.Classes.Eq
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fEqKey_$c==
                  Main.$fEqKey_$c/= -}
c92d59ccce001a0196410776041b6e0e
  $fEqKey_$c/= ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fBitsInt64_$c/=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fEqKey_$c== ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fEqInt64_$c==
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fEqRoute :: GHC.Classes.Eq (Yesod.Routes.Class.Route Main.Pagina)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Pagina)
                  Main.$fEqRoute_$c==
                  Main.$fEqRoute_$c/= -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fEqRoute_$c/= ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Yesod.Routes.Class.Route Main.Pagina -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a159 :: Yesod.Routes.Class.Route Main.Pagina
                   b :: Yesod.Routes.Class.Route Main.Pagina ->
                 case a159 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   Main.HomeR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.HomeR -> GHC.Types.False }
                   Main.LoginR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.LoginR -> GHC.Types.False }
                   Main.UsuarioR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.UsuarioR -> GHC.Types.False }
                   Main.PerfilR a160
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True
                        Main.PerfilR b1
                        -> case a160
                                  `cast`
                                (Trans
                                     (Sub (Main.TFCo:R:KeyUsers[0]))
                                     (Trans
                                          (Main.NTCo:R:KeyUsers[0])
                                          (Trans
                                               (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                               (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))) of wild2 { GHC.Int.I64# a161 ->
                           case b1
                                  `cast`
                                (Trans
                                     (Sub (Main.TFCo:R:KeyUsers[0]))
                                     (Trans
                                          (Main.NTCo:R:KeyUsers[0])
                                          (Trans
                                               (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                               (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))) of wild3 { GHC.Int.I64# b2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# a161 b2) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } }
                   Main.ErroR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.ErroR -> GHC.Types.False }
                   Main.AdminR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.AdminR -> GHC.Types.False }
                   Main.LogoutR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.LogoutR -> GHC.Types.False }
                   Main.WhoisR
                   -> case b `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.WhoisR -> GHC.Types.False } }) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fEqRoute_$c== ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Yesod.Routes.Class.Route Main.Pagina -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds2 :: Yesod.Routes.Class.Route Main.Pagina
                   ds3 :: Yesod.Routes.Class.Route Main.Pagina ->
                 case ds2 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   Main.HomeR
                   -> case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.HomeR -> GHC.Types.True }
                   Main.LoginR
                   -> case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.LoginR -> GHC.Types.True }
                   Main.UsuarioR
                   -> case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.UsuarioR -> GHC.Types.True }
                   Main.PerfilR a159
                   -> case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.PerfilR b1
                        -> GHC.Int.$fEqInt64_$c==
                             a159
                               `cast`
                             (Trans
                                  (Sub (Main.TFCo:R:KeyUsers[0]))
                                  (Trans
                                       (Main.NTCo:R:KeyUsers[0])
                                       (Trans
                                            (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                            (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))))
                             b1
                               `cast`
                             (Trans
                                  (Sub (Main.TFCo:R:KeyUsers[0]))
                                  (Trans
                                       (Main.NTCo:R:KeyUsers[0])
                                       (Trans
                                            (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                            (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))) }
                   Main.ErroR
                   -> case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.ErroR -> GHC.Types.True }
                   Main.AdminR
                   -> case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.AdminR -> GHC.Types.True }
                   Main.LogoutR
                   -> case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.LogoutR -> GHC.Types.True }
                   Main.WhoisR
                   -> case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.WhoisR -> GHC.Types.True } }) -}
c92d59ccce001a0196410776041b6e0e
  $fFromHttpApiDataKey ::
    Web.HttpApiData.Internal.FromHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fFromHttpApiDataKey_$cparseQueryParam
                  Main.$fFromHttpApiDataKey_$cparseHeader
                  Main.$fFromHttpApiDataKey_$cparseQueryParam -}
c92d59ccce001a0196410776041b6e0e
  $fFromHttpApiDataKey_$cparseHeader ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseHeader
                  `cast`
                (<Data.ByteString.Internal.ByteString>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUsers[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))))_R) -}
c92d59ccce001a0196410776041b6e0e
  $fFromHttpApiDataKey_$cparseQueryParam ::
    Data.Text.Internal.Text
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseUrlPiece
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUsers[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))))_R) -}
c92d59ccce001a0196410776041b6e0e
  $fFromJSONEntity ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Entity Main.Users)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.Users>_N)) -}
d5ee02bd1065acdb2980fe1af47d6f35
  $fFromJSONEntity1 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success Data.Text.Internal.Text f r
    -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success
                            Data.Text.Internal.Text f r ->
                 kf Main.$fFromJSONEntity_msg3) -}
bac12653c5c8e9b84eb29b466805760d
  $fFromJSONEntity10 :: [GHC.Types.Char]
  {- Unfolding: (case Data.Text.Show.$w$cshow
                        Main.$fFromJSONEntity11 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                   Main.$fFromJSONEntity3 }) -}
55b6e9649b2713c04380d071e07d512f
  $fFromJSONEntity11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "nome"#) -}
5a1c9da8186b732c600eaeb166f4a3ae
  $fFromJSONEntity2 :: [GHC.Types.Char]
  {- Unfolding: (case Data.Text.Show.$w$cshow
                        Main.$fFromJSONEntity4 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                   Main.$fFromJSONEntity3 }) -}
1435c56344c7af359f1b3efd19040510
  $fFromJSONEntity3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " not present"#) -}
057d87bc8eb2a6b487554d9bfde36f14
  $fFromJSONEntity4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "senha"#) -}
411e49bc8ade51676504564e690c6cf7
  $fFromJSONEntity5 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success Data.Text.Internal.Text f r
    -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success
                            Data.Text.Internal.Text f r ->
                 kf Main.$fFromJSONEntity_msg1) -}
6ba940b3fa906b0a2fd8bb675aedd5bd
  $fFromJSONEntity6 :: [GHC.Types.Char]
  {- Unfolding: (case Data.Text.Show.$w$cshow
                        Main.$fFromJSONEntity7 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                   Main.$fFromJSONEntity3 }) -}
4720efe1f1511d559aee2119a0e88ae8
  $fFromJSONEntity7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "login"#) -}
70554c76eed6f41dfe3fe0bd3da017bf
  $fFromJSONEntity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Text"#) -}
9ee0d66af11b1e5995bf0dda7da1e525
  $fFromJSONEntity9 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success Data.Text.Internal.Text f r
    -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success
                            Data.Text.Internal.Text f r ->
                 kf Main.$fFromJSONEntity_msg2) -}
c92d59ccce001a0196410776041b6e0e
  $fFromJSONEntity_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Entity Main.Users)
  {- Arity: 1,
     Unfolding: (Database.Persist.Class.PersistEntity.entityIdFromJSON
                   @ Main.Users
                   Main.$fPersistEntityUsers
                   Main.$fFromJSONEntity_$cparseJSON1
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0] <Main.Users>_N))
                   Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                     `cast`
                   (Trans
                        (<Data.Aeson.Types.Internal.Value>_R
                         ->_R (Data.Aeson.Types.Internal.Parser
                                 (Trans
                                      (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                                      (Trans
                                           (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                           (Trans
                                                (Sym (Main.NTCo:R:KeyUsers[0]))
                                                (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))))_R)
                        (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.Users>_N)))) -}
c92d59ccce001a0196410776041b6e0e
  $fFromJSONEntity_$cparseJSON1 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Main.Users
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds2 :: Data.Aeson.Types.Internal.Value ->
                 case ds2 of wild {
                   DEFAULT
                   -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero @ Main.Users
                   Data.Aeson.Types.Internal.Object obj
                   -> let {
                        e :: Data.Aeson.Types.Internal.Parser Data.Text.Internal.Text
                        = case Main.$fFromJSONEntity11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.Instances.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 obj of wild1 {
                            GHC.Base.Nothing
                            -> Main.$fFromJSONEntity9
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         <Data.Text.Internal.Text>_R))
                            GHC.Base.Just v
                            -> case v of wild2 {
                                 DEFAULT
                                 -> Data.Aeson.Types.Instances.typeMismatch
                                      @ Data.Text.Internal.Text
                                      Main.$fFromJSONEntity8
                                      wild2
                                 Data.Aeson.Types.Internal.String txt
                                 -> (\ @ (f :: * -> *)
                                       @ r
                                       _kf :: Data.Aeson.Types.Internal.Failure f r
                                       ks :: Data.Aeson.Types.Internal.Success
                                               Data.Text.Internal.Text f r ->
                                     ks txt)
                                      `cast`
                                    (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                              <Data.Text.Internal.Text>_R)) } } }
                      } in
                      let {
                        e1 :: Data.Aeson.Types.Internal.Parser Data.Text.Internal.Text
                        = case Main.$fFromJSONEntity7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.Instances.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 obj of wild1 {
                            GHC.Base.Nothing
                            -> Main.$fFromJSONEntity5
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         <Data.Text.Internal.Text>_R))
                            GHC.Base.Just v
                            -> case v of wild2 {
                                 DEFAULT
                                 -> Data.Aeson.Types.Instances.typeMismatch
                                      @ Data.Text.Internal.Text
                                      Main.$fFromJSONEntity8
                                      wild2
                                 Data.Aeson.Types.Internal.String txt
                                 -> (\ @ (f :: * -> *)
                                       @ r
                                       _kf :: Data.Aeson.Types.Internal.Failure f r
                                       ks :: Data.Aeson.Types.Internal.Success
                                               Data.Text.Internal.Text f r ->
                                     ks txt)
                                      `cast`
                                    (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                              <Data.Text.Internal.Text>_R)) } } }
                      } in
                      let {
                        e2 :: Data.Aeson.Types.Internal.Parser Data.Text.Internal.Text
                        = case Main.$fFromJSONEntity4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.Instances.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 obj of wild1 {
                            GHC.Base.Nothing
                            -> Main.$fFromJSONEntity1
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         <Data.Text.Internal.Text>_R))
                            GHC.Base.Just v
                            -> case v of wild2 {
                                 DEFAULT
                                 -> Data.Aeson.Types.Instances.typeMismatch
                                      @ Data.Text.Internal.Text
                                      Main.$fFromJSONEntity8
                                      wild2
                                 Data.Aeson.Types.Internal.String txt
                                 -> (\ @ (f :: * -> *)
                                       @ r
                                       _kf :: Data.Aeson.Types.Internal.Failure f r
                                       ks :: Data.Aeson.Types.Internal.Success
                                               Data.Text.Internal.Text f r ->
                                     ks txt)
                                      `cast`
                                    (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                              <Data.Text.Internal.Text>_R)) } } }
                      } in
                      (\ @ (f :: * -> *)
                         @ r
                         kf :: Data.Aeson.Types.Internal.Failure f r
                         ks :: Data.Aeson.Types.Internal.Success Main.Users f r ->
                       e `cast`
                       (Data.Aeson.Types.Internal.NTCo:Parser[0]
                            <Data.Text.Internal.Text>_R)
                         @ f
                         @ r
                         kf
                         (\ a159 :: Data.Text.Internal.Text ->
                          e1
                            `cast`
                          (Data.Aeson.Types.Internal.NTCo:Parser[0]
                               <Data.Text.Internal.Text>_R)
                            @ f
                            @ r
                            kf
                            (\ a160 :: Data.Text.Internal.Text ->
                             e2
                               `cast`
                             (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                  <Data.Text.Internal.Text>_R)
                               @ f
                               @ r
                               kf
                               (\ a161 :: Data.Text.Internal.Text ->
                                ks
                                  (case a159 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                   case a160 of dt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                                   case a161 of dt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                   Main.Users dt dt1 dt2 } } })))))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                <Main.Users>_R)) }) -}
525757497686cc381618750a058be0fa
  $fFromJSONEntity_msg1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "key "#
                   Main.$fFromJSONEntity6) -}
831f8c4c1d7237229db40b2aa2637213
  $fFromJSONEntity_msg2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "key "#
                   Main.$fFromJSONEntity10) -}
11294555ecc5c14e44eacecd83151dd7
  $fFromJSONEntity_msg3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "key "#
                   Main.$fFromJSONEntity2) -}
c92d59ccce001a0196410776041b6e0e
  $fFromJSONKey ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntityUsers_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Users>_N)) -}
c92d59ccce001a0196410776041b6e0e
  $fFromJSONUsers :: Data.Aeson.Types.Class.FromJSON Main.Users
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity_$cparseJSON1
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0] <Main.Users>_N)) -}
c92d59ccce001a0196410776041b6e0e
  $fOrdKey ::
    GHC.Classes.Ord
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fEqKey
                  Main.$fOrdKey_$ccompare
                  Main.$fOrdKey_$c<
                  Main.$fOrdKey_$c<=
                  Main.$fOrdKey_$c>
                  Main.$fOrdKey_$c>=
                  Main.$fOrdKey_$cmax
                  Main.$fOrdKey_$cmin -}
c92d59ccce001a0196410776041b6e0e
  $fOrdKey_$c< ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fOrdKey_$c<= ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fOrdKey_$c> ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fOrdKey_$c>= ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fOrdKey_$ccompare ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$ccompare
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <GHC.Types.Ordering>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fOrdKey_$cmax ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmax
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))) -}
c92d59ccce001a0196410776041b6e0e
  $fOrdKey_$cmin ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmin
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUsers[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fParseRoutePagina :: Yesod.Routes.Class.ParseRoute Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fRenderRoutePagina
                  Main.$fParseRoutePagina_$cparseRoute -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fParseRoutePagina_$cparseRoute ::
    ([Data.Text.Internal.Text],
     [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,A)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([Data.Text.Internal.Text],
                         [(Data.Text.Internal.Text, Data.Text.Internal.Text)]) ->
                 case w of ww { (,) ww1 ww2 -> Main.$w$cparseRoute ww1 }) -}
c92d59ccce001a0196410776041b6e0e
  $fPathPieceKey ::
    Web.PathPieces.PathPiece
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fPathPieceKey_$cfromPathPiece
                  Main.$fPathPieceKey_$ctoPathPiece -}
c92d59ccce001a0196410776041b6e0e
  $fPathPieceKey_$cfromPathPiece ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe
         (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$sparseIntegral
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (GHC.Base.Maybe
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUsers[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))))_R) -}
c92d59ccce001a0196410776041b6e0e
  $fPathPieceKey_$ctoPathPiece ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$ctoPathPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers ::
    Database.Persist.Class.PersistEntity.PersistEntity Main.Users
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Users
                  Main.$fPersistFieldKey
                  Main.$fPersistEntityUsers_$ctoJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.Users>_N))
                  Main.$fPersistEntityUsers_$cparseJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.Users>_N))
                  Main.$fShowKey
                  Main.$fReadKey
                  Main.$fEqKey
                  Main.$fOrdKey
                  Main.$fPersistEntityUsers_$ckeyToValues
                  Main.$fPersistEntityUsers_$ckeyFromValues
                  Main.$fPersistEntityUsers_$s$WUsersId
                  Main.$fPersistEntityUsers_$centityDef
                  Main.$fPersistEntityUsers_$cpersistFieldDef
                  Main.$fPersistEntityUsers_$ctoPersistFields
                  Main.$fPersistEntityUsers_$cfromPersistValues
                  Main.$fPersistEntityUsers_$cpersistUniqueKeys
                  Main.$fPersistEntityUsers_$cpersistUniqueToFieldNames
                  Main.$fPersistEntityUsers_$cpersistUniqueToValues
                  Main.$fPersistEntityUsers_$cfieldLens -}
31bdd11a38d661d3e1fea14bf2ed7e13
  $fPersistEntityUsers1 :: [Database.Persist.Types.Base.PersistValue]
  {- Strictness: b -}
c4ccf3c6977e95db8369a979d65bf48f
  $fPersistEntityUsers10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Int64"#) -}
5abb07104b9b592635e50c9b9b908b56
  $fPersistEntityUsers11 :: GHC.Base.Maybe Data.Text.Internal.Text
  {- Unfolding: (GHC.Base.Just
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntityUsers12) -}
de390714c0efd1390fd7b2789f02fbf1
  $fPersistEntityUsers12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Data.Int"#) -}
323806027b260d5343692adfdc7fb31a
  $fPersistEntityUsers13 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityUsers14) -}
cb2e5f244fc0be2a30d19f3805e554e1
  $fPersistEntityUsers14 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "UsersId"#) -}
526f8d27976bf23aaaf8a4b565a52799
  $fPersistEntityUsers15 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Users"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "users"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Yesod.Core.Types.$fSerializeSessionCookie_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntityUsers13
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntityUsers9))
                   Main.$fPersistEntityUsers23
                   Main.$fPersistEntityUsers18
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntityUsers16
                   dt
                   GHC.Types.False } } } } }) -}
744fa9d0b21849b03eb4fa8ddd60adc0
  $fPersistEntityUsers16 :: [Data.Text.Internal.Text]
  {- Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntityUsers17
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
fcb1adbda497e6d4d76117936f1ea472
  $fPersistEntityUsers17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Show"#) -}
464230ae0fff44f6e5e21349dac7db54
  $fPersistEntityUsers18 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityUsers22
                   Main.$fPersistEntityUsers19) -}
699d3932346aba5b87f964cfb3b2a077
  $fPersistEntityUsers19 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityUsers6
                   Main.$fPersistEntityUsers20) -}
820ca3d85c91bed8240ff12a4844e47f
  $fPersistEntityUsers2 ::
    [(Database.Persist.Types.Base.HaskellName,
      Database.Persist.Types.Base.DBName)]
  {- Strictness: b -}
9f5c84192a0ca3ceadf893abd4cdfd9b
  $fPersistEntityUsers20 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityUsers21
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
773c87c0bc1b695da04514308594c5ef
  $fPersistEntityUsers21 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fFromJSONEntity4 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityUsers4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
61676d1161f4549e18993f1869884998
  $fPersistEntityUsers22 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fFromJSONEntity11 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityUsers4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
e40cb0df510be912672248b7adf37263
  $fPersistEntityUsers23 :: [Database.Persist.Types.Base.Attr]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.Attr
                   Main.$fPersistEntityUsers24
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)) -}
f213025b8c679e1854bdd704019c418a
  $fPersistEntityUsers24 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "json"#) -}
c47fea8a0cd2a9d90145419a584879e0
  $fPersistEntityUsers3 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "senha"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityUsers4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
478a6a5c6fec0354cb8232d6c559826f
  $fPersistEntityUsers4 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityUsers5) -}
5fc2d5067cd9a994ab94948297e6ad4c
  $fPersistEntityUsers5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Text"#) -}
1052f854645e383d0709f31ad99afd97
  $fPersistEntityUsers6 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fFromJSONEntity7 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityUsers4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
11c3dabb40e40e6401840d41b6e39f5f
  $fPersistEntityUsers7 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "nome"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityUsers4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
d3b10a9f77347643eb4722930aef3016
  $fPersistEntityUsers8 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Id"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Users"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityUsers13
                   Database.Persist.Types.Base.SqlInt64
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   (Database.Persist.Types.Base.ForeignRef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      Main.$fPersistEntityUsers9) } } }) -}
931d31e70bb4304de1919932b36f730e
  $fPersistEntityUsers9 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   Main.$fPersistEntityUsers11
                   Main.$fPersistEntityUsers10) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$centityDef ::
    GHC.Base.Monad m =>
    m Main.Users -> Database.Persist.Types.Base.EntityDef
  {- Arity: 2, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   ds2 :: m Main.Users ->
                 Main.$fPersistEntityUsers15) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$cfieldLens ::
    Database.Persist.Class.PersistEntity.EntityField Main.Users field
    -> forall (f :: * -> *).
       GHC.Base.Functor f =>
       (field -> f field)
       -> Database.Persist.Class.PersistEntity.Entity Main.Users
       -> f (Database.Persist.Class.PersistEntity.Entity Main.Users)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ field
                   dk :: Database.Persist.Class.PersistEntity.EntityField
                           Main.Users field
                   @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   eta :: field -> f field
                   eta2 :: Database.Persist.Class.PersistEntity.Entity Main.Users ->
                 case dk
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldUserstyp[0]) <field>_N) of wild {
                   Main.UsersId dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Users)
                        (\ key :: field ->
                         case eta2 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds2 value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Users
                           $dPersistEntity
                           key `cast` (Sub dt)
                           value })
                        (eta
                           (case eta2 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds2 ds3 ->
                            ds2 `cast` (Sub (Sym dt)) }))
                   Main.UsersNome dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Users)
                        (\ x13 :: field ->
                         case eta2 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Users
                           $dPersistEntity
                           key
                           (case value of wild2 { Main.Users ds2 ds3 ds4 ->
                            case x13
                                   `cast`
                                 (Sub dt) of dt1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Main.Users dt1 ds3 ds4 } }) })
                        (eta
                           (case eta2 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds2 ds3 ->
                            case ds3 of wild2 { Main.Users ds4 ds5 ds6 ->
                            ds4 `cast` (Sub (Sym dt)) } }))
                   Main.UsersLogin dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Users)
                        (\ x13 :: field ->
                         case eta2 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Users
                           $dPersistEntity
                           key
                           (case value of wild2 { Main.Users ds2 ds3 ds4 ->
                            case x13
                                   `cast`
                                 (Sub dt) of dt1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Main.Users ds2 dt1 ds4 } }) })
                        (eta
                           (case eta2 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds2 ds3 ->
                            case ds3 of wild2 { Main.Users ds4 ds5 ds6 ->
                            ds5 `cast` (Sub (Sym dt)) } }))
                   Main.UsersSenha dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Users)
                        (\ x13 :: field ->
                         case eta2 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Users
                           $dPersistEntity
                           key
                           (case value of wild2 { Main.Users ds2 ds3 ds4 ->
                            case x13
                                   `cast`
                                 (Sub dt) of dt1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Main.Users ds2 ds3 dt1 } }) })
                        (eta
                           (case eta2 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds2 ds3 ->
                            case ds3 of wild2 { Main.Users ds4 ds5 ds6 ->
                            ds6 `cast` (Sub (Sym dt)) } })) }) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$cfromPersistValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either Data.Text.Internal.Text Main.Users
  {- Arity: 1, Strictness: <S,U> -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$ckeyFromValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x13 :: [Database.Persist.Types.Base.PersistValue] ->
                 case (Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                         (Database.Persist.TH.headNote x13))
                        `cast`
                      (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))))_R of wild {
                   Data.Either.Left x14
                   -> Data.Either.Left
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                        x14
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                        y `cast`
                        (Trans
                             (Sym (Main.NTCo:R:KeyUsers[0]))
                             (Sub (Sym (Main.TFCo:R:KeyUsers[0])))) }) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$ckeyToValues ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x13 :: Database.Persist.Class.PersistEntity.Key Main.Users ->
                 GHC.Types.:
                   @ Database.Persist.Types.Base.PersistValue
                   (Database.Persist.Types.Base.PersistInt64
                      x13
                        `cast`
                      (Trans
                           (Sub (Main.TFCo:R:KeyUsers[0]))
                           (Trans
                                (Main.NTCo:R:KeyUsers[0])
                                (Trans
                                     (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                     (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))))
                   (GHC.Types.[] @ Database.Persist.Types.Base.PersistValue)) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                  `cast`
                (<Data.Aeson.Types.Internal.Value>_R
                 ->_R (Data.Aeson.Types.Internal.Parser
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUsers[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))))_R) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$cpersistFieldDef ::
    Database.Persist.Class.PersistEntity.EntityField Main.Users typ
    -> Database.Persist.Types.Base.FieldDef
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ typ
                   ds2 :: Database.Persist.Class.PersistEntity.EntityField
                            Main.Users typ ->
                 case ds2
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldUserstyp[0]) <typ>_N) of wild {
                   Main.UsersId dt -> Main.$fPersistEntityUsers8
                   Main.UsersNome dt -> Main.$fPersistEntityUsers7
                   Main.UsersLogin dt -> Main.$fPersistEntityUsers6
                   Main.UsersSenha dt -> Main.$fPersistEntityUsers3 }) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$cpersistUniqueKeys ::
    Main.Users
    -> [Database.Persist.Class.PersistEntity.Unique Main.Users]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds2 :: Main.Users ->
                 case ds2 of wild { Main.Users _nome _login _senha ->
                 GHC.Types.[]
                   @ (Database.Persist.Class.PersistEntity.Unique Main.Users) }) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$cpersistUniqueToFieldNames ::
    Database.Persist.Class.PersistEntity.Unique Main.Users
    -> [(Database.Persist.Types.Base.HaskellName,
         Database.Persist.Types.Base.DBName)]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds2 :: Database.Persist.Class.PersistEntity.Unique Main.Users ->
                 Main.$fPersistEntityUsers2) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$cpersistUniqueToValues ::
    Database.Persist.Class.PersistEntity.Unique Main.Users
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds2 :: Database.Persist.Class.PersistEntity.Unique Main.Users ->
                 Main.$fPersistEntityUsers1) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fToJSONInt64_$ctoJSON
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <Data.Aeson.Types.Internal.Value>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$ctoPersistFields ::
    Main.Users
    -> [Database.Persist.Class.PersistField.SomePersistField]
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ ds2 :: Main.Users ->
                 case ds2 of wild { Main.Users x13 x14 x15 ->
                 GHC.Types.:
                   @ Database.Persist.Class.PersistField.SomePersistField
                   (Database.Persist.Class.PersistField.SomePersistField
                      @ Data.Text.Internal.Text
                      Database.Persist.Class.PersistField.$fPersistFieldText0
                      x13)
                   (GHC.Types.:
                      @ Database.Persist.Class.PersistField.SomePersistField
                      (Database.Persist.Class.PersistField.SomePersistField
                         @ Data.Text.Internal.Text
                         Database.Persist.Class.PersistField.$fPersistFieldText0
                         x14)
                      (GHC.Types.:
                         @ Database.Persist.Class.PersistField.SomePersistField
                         (Database.Persist.Class.PersistField.SomePersistField
                            @ Data.Text.Internal.Text
                            Database.Persist.Class.PersistField.$fPersistFieldText0
                            x15)
                         (GHC.Types.[]
                            @ Database.Persist.Class.PersistField.SomePersistField))) }) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistEntityUsers_$s$WUsersId ::
    Database.Persist.Class.PersistEntity.EntityField
      Main.Users (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Inline: INLINE,
     Unfolding: InlineRule (0, False, False)
                (Main.UsersId
                   @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                   @~ <Database.Persist.Class.PersistEntity.Key Main.Users>_N)
                  `cast`
                (Sub (Sym (Main.TFCo:R:EntityFieldUserstyp[0])) <Database.Persist.Class.PersistEntity.Key
                                                                   Main.Users>_N) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldKey ::
    Database.Persist.Class.PersistField.PersistField
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fPersistFieldKey_$ctoPersistValue
                  Main.$fPersistFieldKey_$cfromPersistValue -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldKey_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                  `cast`
                (<Database.Persist.Types.Base.PersistValue>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUsers[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))))_R) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldKey_$ctoPersistValue ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Types.Base.PersistInt64
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <Database.Persist.Types.Base.PersistValue>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldSqlKey ::
    Database.Persist.Sql.Class.PersistFieldSql
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fPersistFieldKey
                  Main.$fPersistFieldSqlKey_$csqlType -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldSqlKey_$csqlType ::
    Data.Proxy.Proxy
      (Database.Persist.Class.PersistEntity.Key Main.Users)
    -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Sql.Class.$fPersistFieldSqlInt64_$csqlType
                  `cast`
                ((Data.Proxy.Proxy
                    <*>_N
                    (UnivCo opt_phantom phantom GHC.Int.Int64 (Database.Persist.Class.PersistEntity.Key
                                                                 Main.Users)))_R
                 ->_R <Database.Persist.Types.Base.SqlType>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldSqlUsers ::
    Database.Persist.Sql.Class.PersistFieldSql Main.Users
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Users
                  Main.$fPersistFieldUsers
                  Main.$fPersistFieldSqlUsers_$csqlType -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldSqlUsers_$csqlType ::
    Data.Proxy.Proxy Main.Users -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds2 :: Data.Proxy.Proxy Main.Users ->
                 Database.Persist.Types.Base.SqlString) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldUsers ::
    Database.Persist.Class.PersistField.PersistField Main.Users
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Users
                  Main.$fPersistFieldUsers_$ctoPersistValue
                  Main.$fPersistFieldUsers_$cfromPersistValue -}
eaf5d4541b669d2fc53c45ad419cbd3b
  $fPersistFieldUsers1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldUsers6
                   Main.$fPersistFieldUsers2) -}
75bae1f69e9ec293bbf5b4486865a70f
  $fPersistFieldUsers2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldUsers5
                   Main.$fPersistFieldUsers3) -}
2152d915468c7d060dd5925c7546bc1d
  $fPersistFieldUsers3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldUsers4
                   (GHC.Types.[] @ GHC.Base.String)) -}
58c1b31ef52a2b87ad5ec87b151be6aa
  $fPersistFieldUsers4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "senha"#) -}
fa927336ebff0980dd1a62b6db36b437
  $fPersistFieldUsers5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "login"#) -}
cddced2a0d8bfbbd2c00298057c194fa
  $fPersistFieldUsers6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "nome"#) -}
14e4a6962626813d1dec43cd86913da2
  $fPersistFieldUsers7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4) -}
60e35d07de14e1d288a0eafcfe9dbccd
  $fPersistFieldUsers8 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldUsers_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either Data.Text.Internal.Text Main.Users
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ eta2 :: Database.Persist.Types.Base.PersistValue ->
                 case Database.Persist.Class.PersistField.getPersistMap
                        eta2 of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ Data.Text.Internal.Text @ Main.Users l
                   Data.Either.Right r
                   -> let {
                        columns :: Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text
                                     Database.Persist.Types.Base.PersistValue
                        = Data.Aeson.Types.Internal.$sfromList1
                            @ Database.Persist.Types.Base.PersistValue
                            r
                            (Data.HashMap.Base.Empty
                               @ Data.Text.Internal.Text
                               @ Database.Persist.Types.Base.PersistValue)
                      } in
                      Main.$fPersistEntityUsers_$cfromPersistValues
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ Database.Persist.Types.Base.PersistValue
                           (\ name :: GHC.Base.String ->
                            case GHC.ST.runSTRep
                                   @ Data.Text.Internal.Text
                                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds2 { (#,#) ipv ipv1 ->
                                    Main.$fPersistFieldUsers8
                                      @ s1
                                      (Data.Text.Array.MArray @ s1 ipv1)
                                      Main.$fPersistFieldUsers7
                                      name
                                      0
                                      ipv }) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                            case Data.Aeson.Types.Instances.$w$slookup
                                   @ Database.Persist.Types.Base.PersistValue
                                   ww1
                                   ww2
                                   ww3
                                   columns of wild1 {
                              GHC.Base.Nothing -> Database.Persist.Types.Base.PersistNull
                              GHC.Base.Just v -> v } })
                           Main.$fPersistFieldUsers1) }) -}
c92d59ccce001a0196410776041b6e0e
  $fPersistFieldUsers_$ctoPersistValue ::
    Main.Users -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>m12, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Users ->
                 case Main.$w$ctoPersistValue w of ww { (##) ww1 ->
                 Database.Persist.Types.Base.PersistMap ww1 }) -}
73b7ed94c73f586bf6facae652f77061
  $fPersistFieldUsers_$sgo ::
    [GHC.Types.Char]
    -> [[GHC.Types.Char]]
    -> [Database.Persist.Types.Base.PersistValue]
    -> [(Data.Text.Internal.Text,
         Database.Persist.Types.Base.PersistValue)]
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U> -}
c92d59ccce001a0196410776041b6e0e
  $fReadKey ::
    GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fReadKey_$s$dmreadsPrec
                  Main.$fReadKey_$sreadListDefault
                  Main.$fReadKey_$creadPrec
                  Main.$fReadKey_$creadListPrec -}
c92d59ccce001a0196410776041b6e0e
  $fReadKey1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Database.Persist.Class.PersistEntity.Key Main.Users]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta2 :: [Database.Persist.Class.PersistEntity.Key Main.Users]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                   Main.$fReadKey2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Database.Persist.Class.PersistEntity.Key Main.Users>_R))
                   @ b
                   eta2) -}
c92d59ccce001a0196410776041b6e0e
  $fReadKey2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                   Main.$fReadKey3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Database.Persist.Class.PersistEntity.Key Main.Users>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.Users>_R)))) -}
c92d59ccce001a0196410776041b6e0e
  $fReadKey3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.Users
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.Users
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wa ww1 @ b w1 }) -}
c92d59ccce001a0196410776041b6e0e
  $fReadKey_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Database.Persist.Class.PersistEntity.Key Main.Users]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Database.Persist.Class.PersistEntity.Key Main.Users]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Database.Persist.Class.PersistEntity.Key Main.Users]>_R))) -}
c92d59ccce001a0196410776041b6e0e
  $fReadKey_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Users>_R)) -}
c92d59ccce001a0196410776041b6e0e
  $fReadKey_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Database.Persist.Class.PersistEntity.Key Main.Users)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                   Main.$fReadKey_$creadPrec
                   eta) -}
c92d59ccce001a0196410776041b6e0e
  $fReadKey_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Database.Persist.Class.PersistEntity.Key Main.Users]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Database.Persist.Class.PersistEntity.Key Main.Users]
                   ((Main.$fReadKey_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Database.Persist.Class.PersistEntity.Key Main.Users]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Database.Persist.Class.PersistEntity.Key Main.Users]>_R)
                      @ [Database.Persist.Class.PersistEntity.Key Main.Users]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Database.Persist.Class.PersistEntity.Key Main.Users]))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute :: GHC.Read.Read (Yesod.Routes.Class.Route Main.Pagina)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Pagina)
                  Main.$fReadRoute_$s$dmreadsPrec
                  Main.$fReadRoute_$sreadListDefault
                  Main.$fReadRoute_$creadPrec
                  Main.$fReadRoute_$creadListPrec -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Yesod.Routes.Class.Route Main.Pagina]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta2 :: [Yesod.Routes.Class.Route Main.Pagina]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.$fReadRoute2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Yesod.Routes.Class.Route Main.Pagina>_R))
                   @ b
                   eta2) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute19
                   Main.$fReadRoute11) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute16
                   Main.$fReadRoute12) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute13
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           (Yesod.Routes.Class.Route Main.Pagina)))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute15,
                  Main.$fReadRoute14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Main.WhoisR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
b39751293d079070513f2c0164f44cb2
  $fReadRoute15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WhoisR"#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute18,
                  Main.$fReadRoute17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta
                   Main.LogoutR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
42d5a8d96a5d3d544191e400bc304bc8
  $fReadRoute18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LogoutR"#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute21,
                  Main.$fReadRoute20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.$fReadRoute3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Yesod.Routes.Class.Route Main.Pagina>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Yesod.Routes.Class.Route Main.Pagina>_R)))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Main.AdminR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
d23d3282a863fd700909d918c4b3361f
  $fReadRoute21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdminR"#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute24,
                  Main.$fReadRoute23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Main.ErroR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
0fe67d11084827a5b00dbc4b2a6acd7c
  $fReadRoute24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ErroR"#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute27,
                  Main.$fReadRoute26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta
                   Main.UsuarioR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
f10972e8e104c81989dd65be44d168a4
  $fReadRoute27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UsuarioR"#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute28 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute30,
                  Main.$fReadRoute29
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Main.LoginR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (GHC.Read.choose2
                      @ (Yesod.Routes.Class.Route Main.Pagina)
                      Main.$fReadRoute6
                      n
                      @ b
                      eta)
                   (case n of wild { GHC.Types.I# x13 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x13 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl161 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl162 :: Text.ParserCombinators.ReadP.P b
                               = (GHC.Read.$fReadDouble10
                                    @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                                    Main.$fReadKey3
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <Database.Persist.Class.PersistEntity.Key
                                                           Main.Users>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <Database.Persist.Class.PersistEntity.Key
                                                      Main.Users>_R)))
                                    Main.$fReadRoute5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <Main.UsersId>_R)
                                   @ b
                                   (\ a159 :: Main.UsersId ->
                                    eta
                                      (Main.PerfilR a159)
                                        `cast`
                                      (Sub (Sym (Main.TFCo:R:RoutePagina[0]))))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a159 :: Text.Read.Lex.Lexeme ->
                                case a159 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a160
                                  -> case GHC.Base.eqString a160 Main.$fReadRoute4 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl162 } })
                         } in
                         let {
                           k2 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl161) -}
                           = \ w2 :: () -> lvl161
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a159 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a159)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k2) } })) -}
6f6df522f9f793d4183b599cdfe08e44
  $fReadRoute30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LoginR"#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute31 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Pagina))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute33,
                  Main.$fReadRoute32
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Pagina>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Pagina>_R))))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute32 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Pagina
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Pagina
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Main.HomeR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
fbb18cb1156e71005ee85a3bbc2c83da
  $fReadRoute33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HomeR"#) -}
46ad7980184d40efb98e30b66fe9b6bd
  $fReadRoute4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PerfilR"#) -}
7f29a6f02db5478aa0881fdb68d7ce93
  $fReadRoute5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute31
                   Main.$fReadRoute7) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute28
                   Main.$fReadRoute8) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute25
                   Main.$fReadRoute9) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Pagina))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Pagina))
                   Main.$fReadRoute22
                   Main.$fReadRoute10) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Yesod.Routes.Class.Route Main.Pagina]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Yesod.Routes.Class.Route Main.Pagina]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Yesod.Routes.Class.Route Main.Pagina]>_R))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Yesod.Routes.Class.Route Main.Pagina>_R)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.$fReadRoute_$creadPrec
                   eta) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fReadRoute_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Yesod.Routes.Class.Route Main.Pagina]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Yesod.Routes.Class.Route Main.Pagina]
                   ((Main.$fReadRoute_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Yesod.Routes.Class.Route Main.Pagina]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Yesod.Routes.Class.Route Main.Pagina]>_R)
                      @ [Yesod.Routes.Class.Route Main.Pagina]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Yesod.Routes.Class.Route Main.Pagina]))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fRenderMessagePaginaFormMessage ::
    Text.Shakespeare.I18N.RenderMessage
      Main.Pagina Yesod.Form.Types.FormMessage
  DFunId[0]
  {- Arity: 3, Strictness: <L,A><L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fRenderMessagePaginaFormMessage_$crenderMessage
                  `cast`
                (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                          <Main.Pagina>_N <Yesod.Form.Types.FormMessage>_N)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fRenderMessagePaginaFormMessage_$crenderMessage ::
    Main.Pagina
    -> [Text.Shakespeare.I18N.Lang]
    -> Yesod.Form.Types.FormMessage
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ ds2 :: Main.Pagina
                   ds3 :: [Text.Shakespeare.I18N.Lang]
                   eta :: Yesod.Form.Types.FormMessage ->
                 Yesod.Form.I18n.English.englishFormMessage eta) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fRenderRoutePagina :: Yesod.Routes.Class.RenderRoute Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fEqRoute
                  Main.$fRenderRoutePagina_$crenderRoute -}
13761a66ff5fcd869f693a826ba9cedb
  $fRenderRoutePagina1 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRoutePagina2
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
f6e7dadb79ade2d6e31e587bbd5831a5
  $fRenderRoutePagina10 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRoutePagina11
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
9a4344055b73a2a2bb4c62e66e1e3cf1
  $fRenderRoutePagina11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "usuario"#) -}
7b2539245325fc565e8ad96f021ec850
  $fRenderRoutePagina12 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fFromJSONEntity7
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
3ffd10734d49827d24c9173ae79bb2b7
  $fRenderRoutePagina2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "whois"#) -}
b21204971dbf3277eafee836cd5a70aa
  $fRenderRoutePagina3 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRoutePagina4
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
8400c838e53bd8db60c3f6a65656ba39
  $fRenderRoutePagina4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "logout"#) -}
ed5cc7bc55b2a8fa23c217dfbeb248d6
  $fRenderRoutePagina5 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRoutePagina6
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
b46f7efd0db7d33b9b9840565d7b26ce
  $fRenderRoutePagina6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "admin"#) -}
81624171e2368b515946252ac9b18314
  $fRenderRoutePagina7 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRoutePagina8
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
6966bc96ead979f94f64fce583e5175e
  $fRenderRoutePagina8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "erro"#) -}
f79c8545082d211fc58c9d298132409c
  $fRenderRoutePagina9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "perfil"#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fRenderRoutePagina_$crenderRoute ::
    Yesod.Routes.Class.Route Main.Pagina
    -> ([Data.Text.Internal.Text],
        [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Yesod.Routes.Class.Route Main.Pagina ->
                 case w `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   Main.HomeR
                   -> (GHC.Types.[] @ Data.Text.Internal.Text,
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.LoginR
                   -> (Main.$fRenderRoutePagina12,
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.UsuarioR
                   -> (Main.$fRenderRoutePagina10,
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.PerfilR dyn
                   -> (GHC.Types.:
                         @ Data.Text.Internal.Text
                         Main.$fRenderRoutePagina9
                         (GHC.Types.:
                            @ Data.Text.Internal.Text
                            (Web.PathPieces.$fPathPieceInt64_$ctoPathPiece
                               dyn
                                 `cast`
                               (Trans
                                    (Sub (Main.TFCo:R:KeyUsers[0]))
                                    (Trans
                                         (Main.NTCo:R:KeyUsers[0])
                                         (Trans
                                              (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                              (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))))
                            (GHC.Types.[] @ Data.Text.Internal.Text)),
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.ErroR
                   -> (Main.$fRenderRoutePagina7,
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.AdminR
                   -> (Main.$fRenderRoutePagina5,
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.LogoutR
                   -> (Main.$fRenderRoutePagina3,
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.WhoisR
                   -> (Main.$fRenderRoutePagina1,
                       GHC.Types.[]
                         @ (Data.Text.Internal.Text, Data.Text.Internal.Text)) }) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fRouteAttrsPagina :: Yesod.Routes.Class.RouteAttrs Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fRenderRoutePagina
                  Main.$fRouteAttrsPagina_$crouteAttrs -}
65eba32b272e34243ae661b7824f34f5
  $fRouteAttrsPagina1 :: Data.Set.Base.Set Data.Text.Internal.Text
  {- Unfolding: (Main.$fRouteAttrsPagina_$sfromList
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fRouteAttrsPagina_$crouteAttrs ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds2 :: Yesod.Routes.Class.Route Main.Pagina ->
                 case ds2 of tpl { DEFAULT -> Main.$fRouteAttrsPagina1 }) -}
8bf5088ef5c175c72eeac1ec0e625728
  $fRouteAttrsPagina_$s$wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 6, Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,U> -}
097385aae96f51dc8d8d70ce2ea04b5b
  $fRouteAttrsPagina_$sfromList ::
    [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds2 :: [Data.Text.Internal.Text] ->
                 case ds2 of wild {
                   [] -> Data.Set.Base.Tip @ Data.Text.Internal.Text
                   : x13 ds3
                   -> case ds3 of wild1 {
                        []
                        -> case x13 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Set.Base.Bin
                             @ Data.Text.Internal.Text
                             1
                             dt
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text) }
                        : ipv ipv1
                        -> case x13 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ipv of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT
                             -> Main.$fRouteAttrsPagina_$sgo5
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                             GHC.Types.LT
                             -> Main.$fRouteAttrsPagina_$s$wgo5
                                  1
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  ww5
                                  ww6
                                  ww7
                                  ipv1 } } } } }) -}
d912e4d5cc0f8ea1610757cfd2f5b105
  $fRouteAttrsPagina_$sgo5 ::
    Data.Set.Base.Set Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
c92d59ccce001a0196410776041b6e0e
  $fShowKey ::
    GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fShowKey_$cshowsPrec
                  Main.$fShowKey_$cshow
                  Main.$fShowKey_$cshowList -}
c92d59ccce001a0196410776041b6e0e
  $fShowKey1 ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Database.Persist.Class.PersistEntity.Key
                          Main.Users
                   w1 :: GHC.Base.String ->
                 Main.$w$cshowsPrec 0 w w1) -}
bfd2bebf3ca4905a69033c2e17037260
  $fShowKey2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
1664e44602290d5003474c328b1b828c
  $fShowKey3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unUsersKey = "#) -}
68f95078c7154e01075a0fb7304b08e1
  $fShowKey4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UsersKey {"#) -}
c92d59ccce001a0196410776041b6e0e
  $fShowKey_$cshow ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x13 :: Database.Persist.Class.PersistEntity.Key Main.Users ->
                 Main.$fShowKey_$cshowsPrec
                   GHC.Show.shows18
                   x13
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c92d59ccce001a0196410776041b6e0e
  $fShowKey_$cshowList ::
    [Database.Persist.Class.PersistEntity.Key Main.Users]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                   Main.$fShowKey1) -}
c92d59ccce001a0196410776041b6e0e
  $fShowKey_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.Users
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fShowRoute :: GHC.Show.Show (Yesod.Routes.Class.Route Main.Pagina)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Pagina)
                  Main.$fShowRoute_$cshowsPrec
                  Main.$fShowRoute_$cshow
                  Main.$fShowRoute_$cshowList -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fShowRoute1 ::
    Yesod.Routes.Class.Route Main.Pagina -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowRoute_$cshowsPrec Main.$fShowRoute2) -}
57dfc9350d7c6e91788cb15bddabd397
  $fShowRoute2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
d81f414cc996d3d16c40862f6978a364
  $fShowRoute3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PerfilR "#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fShowRoute_$cshow ::
    Yesod.Routes.Class.Route Main.Pagina -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x13 :: Yesod.Routes.Class.Route Main.Pagina ->
                 Main.$fShowRoute_$cshowsPrec
                   GHC.Show.shows18
                   x13
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fShowRoute_$cshowList ::
    [Yesod.Routes.Class.Route Main.Pagina] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.$fShowRoute1) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fShowRoute_$cshowsPrec ::
    GHC.Types.Int
    -> Yesod.Routes.Class.Route Main.Pagina -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds2 :: GHC.Types.Int
                   ds3 :: Yesod.Routes.Class.Route Main.Pagina
                   eta :: GHC.Base.String ->
                 case ds3 `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   Main.HomeR -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute33 eta
                   Main.LoginR -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute30 eta
                   Main.UsuarioR
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute27 eta
                   Main.PerfilR b1
                   -> case ds2 of wild1 { GHC.Types.I# x13 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x13 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowRoute3
                             (Main.$w$cshowsPrec 11 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowRoute3
                                (Main.$w$cshowsPrec
                                   11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   Main.ErroR -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute24 eta
                   Main.AdminR -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute21 eta
                   Main.LogoutR -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute18 eta
                   Main.WhoisR
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute15 eta }) -}
c92d59ccce001a0196410776041b6e0e
  $fShowUsers :: GHC.Show.Show Main.Users
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Users
                  Main.$fShowUsers_$cshowsPrec
                  Main.$fShowUsers_$cshow
                  Main.$fShowUsers_$cshowList -}
c92d59ccce001a0196410776041b6e0e
  $fShowUsers1 :: Main.Users -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.Users w1 :: GHC.Base.String ->
                 case w of ww { Main.Users ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case ww2 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                 case ww3 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Main.$w$cshowsPrec1
                   0
                   ww5
                   ww6
                   ww7
                   ww9
                   ww10
                   ww11
                   ww13
                   ww14
                   ww15
                   w1 } } } }) -}
8acdbd37391cb153a8449d1ee9fd0a10
  $fShowUsers2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "usersSenha = "#) -}
c95c2a35ec20f3ac12f0ab8fd4df10fb
  $fShowUsers3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "usersLogin = "#) -}
c6db5342c2df709835a444cafdc8fd4d
  $fShowUsers4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
83178592400e16ef2368f524572a42eb
  $fShowUsers5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "usersNome = "#) -}
08e8bbb33f25043846a388ebeefc0a85
  $fShowUsers6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Users {"#) -}
c92d59ccce001a0196410776041b6e0e
  $fShowUsers_$cshow :: Main.Users -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSS),1*U(U(U,U,U),U(U,U,U),U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x13 :: Main.Users ->
                 Main.$fShowUsers_$cshowsPrec
                   GHC.Show.shows18
                   x13
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c92d59ccce001a0196410776041b6e0e
  $fShowUsers_$cshowList :: [Main.Users] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Users Main.$fShowUsers1) -}
c92d59ccce001a0196410776041b6e0e
  $fShowUsers_$cshowsPrec ::
    GHC.Types.Int -> Main.Users -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S(SSS),1*U(U(U,U,U),U(U,U,U),U(U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Users w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Users ww3 ww4 ww5 ->
                 case ww3 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                 case ww4 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                 case ww5 of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                 Main.$w$cshowsPrec1
                   ww1
                   ww7
                   ww8
                   ww9
                   ww11
                   ww12
                   ww13
                   ww15
                   ww16
                   ww17
                   w2 } } } } }) -}
c92d59ccce001a0196410776041b6e0e
  $fToBackendKeySqlBackendUsers ::
    Database.Persist.Class.PersistStore.ToBackendKey
      Database.Persist.Sql.Types.SqlBackend Main.Users
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Persist.Sql.Types.SqlBackend
                  @ Main.Users
                  Main.$fPersistEntityUsers
                  (GHC.Types.Eq#
                     @ *
                     @ (Database.Persist.Class.PersistEntity.PersistEntityBackend
                          Main.Users)
                     @ Database.Persist.Sql.Types.SqlBackend
                     @~ (Main.TFCo:R:PersistEntityBackendUsers[0]))
                  Database.Persist.Sql.Orphan.PersistStore.$fPersistStoreSqlBackend
                  Main.unUsersKey
                  (\ tpl :: Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.SqlBackend ->
                   tpl)
                    `cast`
                  (<Database.Persist.Class.PersistStore.BackendKey
                      Database.Persist.Sql.Types.SqlBackend>_R
                   ->_R Trans
                            (Sym (Main.NTCo:R:KeyUsers[0]))
                            (Sub (Sym (Main.TFCo:R:KeyUsers[0])))) -}
c92d59ccce001a0196410776041b6e0e
  $fToHttpApiDataKey ::
    Web.HttpApiData.Internal.ToHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Users)
                  Main.$fToHttpApiDataKey_$ctoQueryParam
                  Main.$fToHttpApiDataKey_$ctoHeader
                  Main.$fToHttpApiDataKey_$ctoQueryParam -}
c92d59ccce001a0196410776041b6e0e
  $fToHttpApiDataKey_$ctoHeader ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoHeader
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <Data.ByteString.Internal.ByteString>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fToHttpApiDataKey_$ctoQueryParam ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoUrlPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUsers[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUsers[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
c92d59ccce001a0196410776041b6e0e
  $fToJSONEntity ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Entity Main.Users)
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.Users>_N)) -}
c92d59ccce001a0196410776041b6e0e
  $fToJSONEntity_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Entity Main.Users
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ w3 :: Database.Persist.Class.PersistEntity.Entity Main.Users ->
                 Database.Persist.Class.PersistEntity.$wentityIdToJSON
                   @ Main.Users
                   Main.$fToJSONEntity_$ctoJSON1
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Users>_N))
                   w3) -}
c92d59ccce001a0196410776041b6e0e
  $fToJSONEntity_$ctoJSON1 ::
    Main.Users -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Users ->
                 case w of ww { Main.Users ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Main.$fFromJSONEntity11, Data.Aeson.Types.Internal.String ww1)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Main.$fFromJSONEntity7, Data.Aeson.Types.Internal.String ww2)
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Main.$fFromJSONEntity4, Data.Aeson.Types.Internal.String ww3)
                                 (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt } }) -}
c92d59ccce001a0196410776041b6e0e
  $fToJSONKey ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Key Main.Users)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntityUsers_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Users>_N)) -}
c92d59ccce001a0196410776041b6e0e
  $fToJSONUsers :: Data.Aeson.Types.Class.ToJSON Main.Users
  DFunId[0]
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity_$ctoJSON1
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Users>_N)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodDispatchPagina ::
    Yesod.Core.Class.Dispatch.YesodDispatch Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fYesodPagina
                  Main.$fYesodDispatchPagina_$cyesodDispatch -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodDispatchPagina_$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.Pagina
    -> Network.Wai.Application
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><S(LLLLLLLSLLLLLLLL),1*U(U(U,U,U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Yesod.Core.Types.YesodRunnerEnv Main.Pagina
                   w1 :: Network.Wai.Internal.Request ->
                 case w1 of ww { Network.Wai.Internal.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 Main.$w$cyesodDispatch
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16 }) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina :: Yesod.Core.Class.Yesod.Yesod Main.Pagina
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fRenderRoutePagina
                  Main.$fYesodPagina_$s$dmapproot
                  Main.$fYesodPagina_$cerrorHandler
                  Main.$fYesodPagina_$cdefaultLayout
                  Main.$fYesodPagina_$s$dmurlRenderOverride
                  Main.$fYesodPagina_$cisAuthorized
                  Main.$fYesodPagina_$cisWriteRequest
                  Main.$fYesodPagina_$cauthRoute
                  Main.$fYesodPagina_$ccleanPath
                  Main.$fYesodPagina_$cjoinPath
                  Main.$fYesodPagina_$caddStaticContent
                  Main.$fYesodPagina_$s$dmmaximumContentLength
                  Main.$fYesodPagina_$cmakeLogger
                  Main.$fYesodPagina_$cmessageLoggerSource
                  Main.$fYesodPagina_$s$dmjsLoader
                  Main.$fYesodPagina_$cmakeSessionBackend
                  Main.$fYesodPagina_$cfileUpload
                  Main.$fYesodPagina_$s$dmshouldLog
                  Main.$fYesodPagina_$cshouldLogIO
                  Main.$fYesodPagina_$cyesodMiddleware
                  Main.$fYesodPagina_$cyesodWithInternalState -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina1 ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ res
                   w :: Yesod.Core.Content.ToTypedContent res
                   w1 :: Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
                   w2 :: Yesod.Core.Types.HandlerData
                           Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Yesod.Core.Types.HandlerData ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wa1 @ res w1 ww1 ww2 ww3 ww4 ww5 w3 }) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina10 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.Pagina,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (5, True, True)
                (\ ds2 :: Data.Text.Internal.Text
                   ds3 :: Data.Text.Internal.Text
                   ds4 :: Data.ByteString.Lazy.Internal.ByteString
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2,
                    GHC.Base.Nothing
                      @ (Data.Either.Either
                           Data.Text.Internal.Text
                           (Yesod.Routes.Class.Route Main.Pagina,
                            [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)) -}
8898fc0c2ad2284500cdaee9ade9563c
  $fYesodPagina11 ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1 -}
aa6c4dfa21acd9abd0f10c2c50855736
  $fYesodPagina12 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Data.Text.Internal.empty_
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
1311bc6f6d285a4937d3788690e71da8
  $fYesodPagina13 ::
    (Data.Text.Internal.Text, Data.Text.Internal.Text)
    -> (Data.ByteString.Internal.ByteString,
        GHC.Base.Maybe Data.ByteString.Internal.ByteString)
  {- Arity: 1,
     Unfolding: (\ ds2 :: (Data.Text.Internal.Text,
                           Data.Text.Internal.Text) ->
                 (case ds2 of wild { (,) x13 y ->
                  Data.Text.Encoding.encodeUtf8 x13 },
                  case ds2 of wild { (,) x13 y ->
                  case y of wild1 { Data.Text.Internal.Text dt1 dt2 dt3 ->
                  case Data.Text.Internal.empty_ of wild2 { Data.Text.Internal.Text dt4 dt5 dt6 ->
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool
                         (GHC.Prim.==# dt3 dt6) of wild3 {
                    GHC.Types.False
                    -> GHC.Base.Just
                         @ Data.ByteString.Internal.ByteString
                         (Data.Text.Encoding.$wencodeUtf8 dt1 dt2 dt3)
                    GHC.Types.True
                    -> case {__pkg_ccall text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                              dt1
                              (GHC.Prim.int2Word# dt2)
                              dt4
                              (GHC.Prim.int2Word# dt5)
                              (GHC.Prim.int2Word# dt3)
                              GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                       case GHC.Prim.narrow32Int# ds12 of wild5 {
                         DEFAULT
                         -> GHC.Base.Just
                              @ Data.ByteString.Internal.ByteString
                              (Data.Text.Encoding.$wencodeUtf8 dt1 dt2 dt3)
                         0
                         -> GHC.Base.Nothing
                              @ Data.ByteString.Internal.ByteString } } } } } })) -}
1fe08c5006eb4c7f1999fb9e2ede0ef2
  $fYesodPagina14 ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1,
     Unfolding: (\ t :: Data.Text.Internal.Text ->
                 case t of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a159 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wloop_all :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a159) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                 DEFAULT -> GHC.Types.False '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    case GHC.Prim.chr#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.uncheckedIShiftL#
                                                    (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                    10)
                                                 (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                              65536) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 2) } } } } }
                       GHC.Types.True -> GHC.Types.True }
                 } in
                 case $wloop_all dt1 of wild1 {
                   GHC.Types.False -> wild
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# 1 dt2) of wild3 {
                        GHC.Types.False
                        -> case Data.Text.$witerN
                                  Main.$fYesodPagina15
                                  dt
                                  dt1
                                  dt2 of ww4 { DEFAULT ->
                           case GHC.Prim.-# dt2 ww4 of wild5 {
                             DEFAULT -> Data.Text.Internal.Text dt (GHC.Prim.+# dt1 ww4) wild5
                             0 -> Data.Text.Internal.empty } }
                        GHC.Types.True -> Data.Text.Internal.empty } } }) -}
162d5a6f94a4c249ddd191c168aac60a
  $fYesodPagina15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
38e0e64596475c16017c0e173198556b
  $fYesodPagina16 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x13 :: Data.Text.Internal.Text ->
                 case x13 of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt2 0) of wild1 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina17 ::
    GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (Yesod.Routes.Class.Route Main.Pagina)
                   Main.LoginR `cast` (Sub (Sym (Main.TFCo:R:RoutePagina[0])))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina18 ::
    Yesod.Core.Types.HandlerData
      Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Main.$fYesodPagina_ds
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Main.Pagina>_N <GHC.Types.IO>_N <Network.Wai.Internal.Request>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Network.Wai.Internal.Request>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.List.elem
                           @ Network.HTTP.Types.Method.Method
                           Data.ByteString.Internal.$fEqByteString
                           (case ipv1 of wild { Network.Wai.Internal.Request ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                            ds3 })
                           Main.$fYesodPagina19 of wild {
                      GHC.Types.False -> GHC.Types.True
                      GHC.Types.True -> GHC.Types.False } #) }) -}
4b7988e892a7eed5b8a7819e9bd3c7be
  $fYesodPagina19 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodPagina26
                   Main.$fYesodPagina20) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina2 ::
    Main.Pagina
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ a159 :: Main.Pagina
                   b :: Control.Monad.Logger.LogSource
                   c :: Control.Monad.Logger.LogLevel
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Yesod.Core.Class.Yesod.defaultShouldLog b c #)) -}
0ef742745a1369919e6bffbea3761b8a
  $fYesodPagina20 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodPagina25
                   Main.$fYesodPagina21) -}
4e2d0eb62d04622d5484b0faf7d6a893
  $fYesodPagina21 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodPagina24
                   Main.$fYesodPagina22) -}
5cb3fd240586d01e55601f46d013afd6
  $fYesodPagina22 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodPagina23
                   (GHC.Types.[] @ Network.HTTP.Types.Method.Method)) -}
9ae7660dfaeff07af91d40c88cc73f37
  $fYesodPagina23 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "TRACE"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
6247b0a9af6bd35d9020c696dc9f0b10
  $fYesodPagina24 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "OPTIONS"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
0b0ab9281fd54b66e9063f3641ac3a48
  $fYesodPagina25 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "HEAD"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
16e3a546c608b7a7f594d51fdcd7edd2
  $fYesodPagina26 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "GET"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
9e1ac19d7863bed8f5de6e02c4e5ce69
  $fYesodPagina27 ::
    Control.Monad.Trans.Resource.MonadResourceBase GHC.Types.IO
  {- Strictness: m,
     Unfolding: ((Control.Monad.Trans.Control.$fMonadBaseControlIOIO,
                  Control.Monad.Catch.$fMonadThrowIO,
                  Control.Monad.Base.$fMonadBaseIOIO,
                  Control.Monad.IO.Class.$fMonadIOIO,
                  GHC.Base.$fApplicativeIO)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina28 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadResourceHandlerT -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina29 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadBasebHandlerT -}
8a5e20a588a593ff9ee613ff6ac137af
  $fYesodPagina3 :: Yesod.Core.Types.FileUpload
  {- Strictness: m1,
     Unfolding: (Yesod.Core.Types.FileUploadMemory
                   Main.$fYesodPagina4) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina30 ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadHandlerT -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina31 ::
    GHC.Base.String
    -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a159 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a159)
                   eta) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina32 ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fApplicativeHandlerT -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina33 ::
    GHC.Base.Functor
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Yesod.Core.Handler.$s$fFunctorHandlerT @ Main.Pagina) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina34 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadIOHandlerT -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina35 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina_$s$fMonadThrowHandlerT -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina36 ::
    Yesod.Routes.Class.Route Main.Pagina
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.AuthResult #)
  {- Arity: 4, Strictness: <S,1*U><L,A><L,U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w :: Yesod.Routes.Class.Route Main.Pagina
                   w1 :: GHC.Types.Bool
                   w2 :: Yesod.Core.Types.HandlerData
                           Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa5 w w2 w3) -}
1c8b897f3d02ac8329387fc55f977212
  $fYesodPagina37 :: Yesod.Core.Types.AuthResult
  {- Strictness: m3,
     Unfolding: (Yesod.Core.Types.Unauthorized Main.$fYesodPagina38) -}
bd0eb6b7560a7e1d3e7b606a371131b1
  $fYesodPagina38 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "Voce precisa ser admin para entrar aqui"#) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina39 ::
    Yesod.Core.Types.HandlerT
      Main.Pagina GHC.Types.IO (GHC.Base.Maybe Data.Text.Internal.Text)
  {- Unfolding: (Yesod.Core.Handler.lookupSession
                   @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                   Main.$fYesodPagina_$s$fMonadHandlerHandlerT
                   Main.$fYesodPagina40) -}
f2badaea033f246ff27497f9ca3d253a
  $fYesodPagina4 ::
    Data.ByteString.Internal.ByteString
    -> Network.Wai.Parse.FileInfo ()
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> GHC.Types.IO Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ w1 :: Data.ByteString.Internal.ByteString
                   w2 :: Network.Wai.Parse.FileInfo ()
                   w3 :: GHC.Types.IO Data.ByteString.Internal.ByteString ->
                 Network.Wai.Parse.$wlbsBackEnd
                   @ Data.ByteString.Internal.ByteString
                   @ (Network.Wai.Parse.FileInfo ())
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   w3) -}
cf4edcbae8e1194ebd6f8049e045d813
  $fYesodPagina40 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "_ID"#) -}
5a53ac1fb83937409973c769392fa9ae
  $fYesodPagina5 :: Yesod.Core.Types.FileUpload
  {- Strictness: m2,
     Unfolding: (Yesod.Core.Types.FileUploadDisk
                   (Network.Wai.Parse.tempFileBackEnd1
                      @ Data.ByteString.Internal.ByteString
                      @ (Network.Wai.Parse.FileInfo ()))
                     `cast`
                   (<Control.Monad.Trans.Resource.InternalState>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <Network.Wai.Parse.FileInfo ()>_R
                    ->_R <GHC.Types.IO Data.ByteString.Internal.ByteString>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.IO.FilePath>_R))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina6 ::
    Main.Pagina
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 2, Strictness: <L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Pagina
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa2 w1) -}
5a84eb915fa2cd9e1eefc1d6d50cb0bc
  $fYesodPagina7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 7200000000000000) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina8 ::
    Main.Pagina
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, True)
                (\ w :: Main.Pagina
                   w1 :: Yesod.Core.Types.Logger
                   w2 :: Language.Haskell.TH.Syntax.Loc
                   w3 :: Control.Monad.Logger.LogSource
                   w4 :: Control.Monad.Logger.LogLevel
                   w5 :: System.Log.FastLogger.LogStr.LogStr
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa3 w1 w2 w3 w4 w5 w6) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina9 ::
    Main.Pagina
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.Logger #)
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds2 :: Main.Pagina
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Yesod.Core.Class.Yesod.defaultMakeLogger1 eta) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$caddStaticContent ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerT
         Main.Pagina
         GHC.Types.IO
         (GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.Pagina,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])))
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina10
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.ByteString.Lazy.Internal.ByteString>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <GHC.Base.Maybe
                                            (Data.Either.Either
                                               Data.Text.Internal.Text
                                               (Yesod.Routes.Class.Route Main.Pagina,
                                                [(Data.Text.Internal.Text,
                                                  Data.Text.Internal.Text)]))>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N
                                    <GHC.Types.IO>_N
                                    <GHC.Base.Maybe
                                       (Data.Either.Either
                                          Data.Text.Internal.Text
                                          (Yesod.Routes.Class.Route Main.Pagina,
                                           [(Data.Text.Internal.Text,
                                             Data.Text.Internal.Text)]))>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cauthRoute ::
    Main.Pagina
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ ds2 :: Main.Pagina -> Main.$fYesodPagina17) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$ccleanPath ::
    Main.Pagina
    -> [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <L,A><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Pagina w1 :: [Data.Text.Internal.Text] ->
                 Main.$w$ccleanPath w1) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cdefaultLayout ::
    Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO ()
    -> Yesod.Core.Types.HandlerT
         Main.Pagina GHC.Types.IO Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,U> -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cerrorHandler ::
    Yesod.Core.Types.ErrorResponse
    -> Yesod.Core.Types.HandlerT
         Main.Pagina GHC.Types.IO Yesod.Core.Types.TypedContent
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cfileUpload ::
    Main.Pagina
    -> Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Pagina w1 :: Network.Wai.Internal.RequestBodyLength ->
                 Main.$w$cfileUpload w1) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cisAuthorized ::
    Yesod.Routes.Class.Route Main.Pagina
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerT
         Main.Pagina GHC.Types.IO Yesod.Core.Types.AuthResult
  {- Arity: 4, Strictness: <S,1*U><L,A><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina36
                  `cast`
                (<Yesod.Routes.Class.Route Main.Pagina>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.AuthResult>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N
                                    <GHC.Types.IO>_N
                                    <Yesod.Core.Types.AuthResult>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cisWriteRequest ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Yesod.Core.Types.HandlerT
         Main.Pagina GHC.Types.IO GHC.Types.Bool
  {- Arity: 3, Strictness: <L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ w :: Yesod.Routes.Class.Route Main.Pagina
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$fYesodPagina18 eta eta2)
                  `cast`
                (<Yesod.Routes.Class.Route Main.Pagina>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <GHC.Types.Bool>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cjoinPath ::
    Main.Pagina
    -> Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 4, Strictness: <L,A><L,1*U(U,U,U)><L,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w :: Main.Pagina
                   w1 :: Data.Text.Internal.Text
                   w2 :: [Data.Text.Internal.Text]
                   w3 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 Main.$w$cjoinPath w1 w2 w3) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cmakeLogger ::
    Main.Pagina -> GHC.Types.IO Yesod.Core.Types.Logger
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina9
                  `cast`
                (<Main.Pagina>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.Logger>_R)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cmakeSessionBackend ::
    Main.Pagina
    -> GHC.Types.IO (GHC.Base.Maybe Yesod.Core.Types.SessionBackend)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina6
                  `cast`
                (<Main.Pagina>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <GHC.Base.Maybe Yesod.Core.Types.SessionBackend>_R)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cmessageLoggerSource ::
    Main.Pagina
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina8
                  `cast`
                (<Main.Pagina>_R
                 ->_R <Yesod.Core.Types.Logger>_R
                 ->_R <Language.Haskell.TH.Syntax.Loc>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R <System.Log.FastLogger.LogStr.LogStr>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cshouldLogIO ::
    Main.Pagina
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina2
                  `cast`
                (<Main.Pagina>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cyesodMiddleware ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
    -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPagina1
                  `cast`
                (forall res.
                 <Yesod.Core.Content.ToTypedContent res>_R
                 ->_R <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <res>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <res>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$cyesodWithInternalState ::
    Main.Pagina
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
    -> (Control.Monad.Trans.Resource.InternalState -> GHC.Types.IO a)
    -> GHC.Types.IO a
  {- Arity: 4, Strictness: <L,A><L,A><L,1*C1(C1(U))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ @ a159
                   ds2 :: Main.Pagina
                   ds3 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
                   eta2 :: Control.Monad.Trans.Resource.InternalState
                           -> GHC.Types.IO a159
                   eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (Control.Exception.Base.bracket
                    @ Control.Monad.Trans.Resource.InternalState
                    @ ()
                    @ a159
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$screateInternalState
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$scloseInternalState
                    eta2)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a159>_R)
                   eta3)
                  `cast`
                (forall a159.
                 <Main.Pagina>_R
                 ->_R <GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)>_R
                 ->_R <Control.Monad.Trans.Resource.InternalState
                       -> GHC.Types.IO a159>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <a159>_R)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$dmapproot :: Yesod.Core.Types.Approot Main.Pagina
  {- HasNoCafRefs,
     Unfolding: InlineRule (-1, True, True)
                (Yesod.Core.Types.ApprootRelative @ Main.Pagina) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$dmjsLoader ::
    Main.Pagina -> Yesod.Core.Types.ScriptLoadPosition Main.Pagina
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds2 :: Main.Pagina ->
                 Yesod.Core.Types.BottomOfBody @ Main.Pagina) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$dmmaximumContentLength ::
    Main.Pagina
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
    -> GHC.Base.Maybe GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (-1, True, False)
                (\ ds2 :: Main.Pagina
                   ds3 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina) ->
                 GHC.Base.$
                   @ GHC.Word.Word64
                   @ (GHC.Base.Maybe GHC.Word.Word64)
                   (GHC.Base.Just @ GHC.Word.Word64)
                   (GHC.Word.$fNumWord64_$c*
                      (GHC.Word.$fNumWord64_$c*
                         (GHC.Word.$fBitsWord64_$cfromInteger __integer 2)
                         (GHC.Word.$fBitsWord64_$cfromInteger __integer 1024))
                      (GHC.Word.$fBitsWord64_$cfromInteger __integer 1024))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$dmshouldLog ::
    Main.Pagina
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds2 :: Main.Pagina
                   eta2 :: Control.Monad.Logger.LogSource
                   eta3 :: Control.Monad.Logger.LogLevel ->
                 Yesod.Core.Class.Yesod.defaultShouldLog eta2 eta3) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$dmurlRenderOverride ::
    Main.Pagina
    -> Yesod.Routes.Class.Route Main.Pagina
    -> GHC.Base.Maybe Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds2 :: Main.Pagina
                   ds3 :: Yesod.Routes.Class.Route Main.Pagina ->
                 GHC.Base.Nothing @ Data.ByteString.Builder.Internal.Builder) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fApplicativeHandlerT ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina33
                  Main.$fYesodPagina_$s$fApplicativeHandlerT_$cpure
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina33
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c*>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina33
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina33
                     GHC.Base.$fMonadIO) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fApplicativeHandlerT_$cpure ::
    a -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a159
                   eta :: a159
                   eta2 :: Yesod.Core.Types.HandlerData
                             Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO @ a159 eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a159>_R)
                   eta3)
                  `cast`
                (forall a159.
                 <a159>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a159>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <a159>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fMonadBasebHandlerT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$fYesodPagina32
                  GHC.Base.$fMonadIO
                  Main.$fYesodPagina30
                  Main.$fYesodPagina_$s$fMonadBasebHandlerT_$cliftBase -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fMonadBasebHandlerT_$cliftBase ::
    GHC.Types.IO α
    -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO α
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α eta :: GHC.Types.IO α ->
                 let {
                   eta2 :: GHC.Types.IO α = GHC.Base.id @ (GHC.Types.IO α) eta
                 } in
                 (\ ds2 :: Yesod.Core.Types.HandlerData
                             Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                  eta2)
                   `cast`
                 (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                           <Main.Pagina>_N <GHC.Types.IO>_N <α>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fMonadHandlerHandlerT ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina28
                  (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT_$cliftHandlerT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina28
                     Main.$fYesodPagina27) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fMonadHandlerT ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina32
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>=
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina32
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina32
                     GHC.Base.$fMonadIO)
                  Main.$fYesodPagina_$s$fApplicativeHandlerT_$cpure
                  Main.$fYesodPagina31 -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fMonadIOHandlerT ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina30
                  Main.$fYesodPagina_$s$fMonadBasebHandlerT_$cliftBase -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fMonadResourceHandlerT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina35
                  Main.$fYesodPagina34
                  Main.$fYesodPagina32
                  Main.$fYesodPagina29
                  (Yesod.Core.Types.$fMonadResourceHandlerT_$cliftResourceT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina35
                     Main.$fYesodPagina34
                     Main.$fYesodPagina32
                     Main.$fYesodPagina29
                     Control.Monad.IO.Class.$fMonadIOIO
                     Control.Monad.Base.$fMonadBaseIOIO
                     Control.Monad.Catch.$fMonadThrowIO) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fMonadThrowHandlerT ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina30
                  Main.$fYesodPagina_$s$fMonadThrowHandlerT_$cthrowM -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_$s$fMonadThrowHandlerT_$cthrowM ::
    GHC.Exception.Exception e =>
    e -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ e
                   @ a159
                   eta :: GHC.Exception.Exception e
                   x13 :: e
                   eta2 :: Yesod.Core.Types.HandlerData
                             Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.IO.throwIO @ e @ a159 eta x13)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a159>_R)
                   eta3)
                  `cast`
                (forall e a159.
                 <GHC.Exception.Exception e>_R
                 ->_R <e>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a159>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <a159>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPagina_ds ::
    Yesod.Core.Types.HandlerT
      Main.Pagina GHC.Types.IO Network.Wai.Internal.Request
  {- Unfolding: (Yesod.Core.Handler.waiRequest
                   @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                   Main.$fYesodPagina_$s$fMonadHandlerHandlerT) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina :: Yesod.Persist.Core.YesodPersist Main.Pagina
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pagina
                  Main.$fYesodPersistPagina4
                    `cast`
                  (GHC.Base.Monad
                     (Control.Monad.Trans.Reader.ReaderT
                        (Sym (Main.TFCo:R:YesodPersistBackendPagina[0]))
                        <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_N)_N)_R
                  Main.$fYesodPersistPagina_$crunDB -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina1 ::
    Yesod.Persist.Core.YesodDB Main.Pagina a
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, Strictness: <L,1*C1(U)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a159
                   f :: Yesod.Persist.Core.YesodDB Main.Pagina a159
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Main.$fYesodPersistPagina3
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Main.Pagina>_N
                            <GHC.Types.IO>_N
                            (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                 <Main.Pagina>_N <GHC.Types.IO>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Main.Pagina>_R)
                        eta2 of ds2 { (#,#) ipv ipv1 ->
                 Main.$fYesodPersistPagina2
                   @ Database.Persist.Sql.Types.SqlBackend
                   @ a159
                   (case ipv1 of wild { Main.Pagina ds3 -> ds3 })
                   (Database.Persist.Sql.Run.runSqlConn
                      @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                      @ a159
                      Main.$fYesodPersistPagina_$s$fMonadBaseControlbHandlerT
                      f `cast`
                      (Control.Monad.Trans.Reader.ReaderT
                         (Sub (Main.TFCo:R:YesodPersistBackendPagina[0]))
                         <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                         <a159>_N)_R)
                   eta
                   ipv }) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina2 ::
    Data.Pool.Pool a9
    -> (a9 -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO b)
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 4,
     Strictness: <L,1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),U(U,U,U),A)><L,1*C1(C1(C1(U)))><L,U><L,U> -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina3 ::
    Yesod.Core.Types.HandlerT
      Main.Pagina
      GHC.Types.IO
      (Yesod.Core.Class.Handler.HandlerSite
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Unfolding: (Yesod.Core.Handler.getYesod
                   @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                   Main.$fYesodPagina_$s$fMonadHandlerHandlerT) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina4 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPersistPagina_$s$fMonadReaderT -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina5 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPersistPagina_$s$fApplicativeReaderT -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina6 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Main.$fYesodPersistPagina_$s$fFunctorReaderT
                   @ Database.Persist.Sql.Types.SqlBackend) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$crunDB ::
    Yesod.Persist.Core.YesodDB Main.Pagina a
    -> Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO a
  {- Arity: 3, Strictness: <L,1*C1(U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodPersistPagina1
                  `cast`
                (forall a159.
                 <Yesod.Persist.Core.YesodDB Main.Pagina a159>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a159>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <a159>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       Database.Persist.Sql.Types.SqlBackend
                       (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
                  Main.$fYesodPersistPagina6
                  Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$cpure
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*>
                     @ Database.Persist.Sql.Types.SqlBackend
                     @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                     Main.$fYesodPersistPagina6
                     Main.$fYesodPagina32)
                  Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$c*>
                  Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$c<* -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a159
                   @ b
                   eta :: Control.Monad.Trans.Reader.ReaderT
                            Database.Persist.Sql.Types.SqlBackend
                            (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                            a159
                   eta2 :: Control.Monad.Trans.Reader.ReaderT
                             Database.Persist.Sql.Types.SqlBackend
                             (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                             b ->
                 let {
                   f :: Control.Monad.Trans.Reader.ReaderT
                          Database.Persist.Sql.Types.SqlBackend
                          (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                          (b -> b)
                   = Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$
                       @ Database.Persist.Sql.Types.SqlBackend
                       @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                       Main.$fYesodPagina33
                       @ (b -> b)
                       @ a159
                       (GHC.Base.id @ b)
                       eta
                 } in
                 (\ r1 :: Database.Persist.Sql.Types.SqlBackend ->
                  Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                    @ Main.Pagina
                    @ GHC.Types.IO
                    Main.$fYesodPagina33
                    GHC.Base.$fMonadIO
                    @ b
                    @ b
                    (f `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                          <b -> b>_N)
                       r1)
                    (eta2
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                          <b>_N)
                       r1))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                           <Database.Persist.Sql.Types.SqlBackend>_R
                           <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                           <b>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a159
                   @ b
                   eta :: Control.Monad.Trans.Reader.ReaderT
                            Database.Persist.Sql.Types.SqlBackend
                            (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                            a159
                   eta2 :: Control.Monad.Trans.Reader.ReaderT
                             Database.Persist.Sql.Types.SqlBackend
                             (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                             b
                   eta3 :: Database.Persist.Sql.Types.SqlBackend ->
                 Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                   @ Main.Pagina
                   @ GHC.Types.IO
                   Main.$fYesodPagina33
                   GHC.Base.$fMonadIO
                   @ b
                   @ a159
                   ((Main.$fYesodPersistPagina_$s$fFunctorReaderT_$cfmap
                       @ Database.Persist.Sql.Types.SqlBackend
                       @ a159
                       @ (b -> a159)
                       (GHC.Base.const @ a159 @ b)
                       eta)
                      `cast`
                    (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                         <Database.Persist.Sql.Types.SqlBackend>_R
                         <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                         <b -> a159>_N)
                      eta3)
                   (eta2
                      `cast`
                    (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                         <Database.Persist.Sql.Types.SqlBackend>_R
                         <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                         <b>_N)
                      eta3))
                  `cast`
                (forall a159 b.
                 <Control.Monad.Trans.Reader.ReaderT
                    Database.Persist.Sql.Types.SqlBackend
                    (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                    a159>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         Database.Persist.Sql.Types.SqlBackend
                         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                               <Database.Persist.Sql.Types.SqlBackend>_R
                               <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                               <a159>_N)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fApplicativeReaderT_$cpure ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a159
                   eta :: a159
                   eta2 :: Database.Persist.Sql.Types.SqlBackend
                   eta3 :: Yesod.Core.Types.HandlerData
                             Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ((Main.$fYesodPagina_$s$fApplicativeHandlerT_$cpure @ a159 eta)
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Main.Pagina>_N <GHC.Types.IO>_N <a159>_N)
                    eta3)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a159>_R)
                   eta4)
                  `cast`
                (forall a159.
                 <a159>_R
                 ->_R Trans
                          (<Database.Persist.Sql.Types.SqlBackend>_R
                           ->_R Trans
                                    (<Yesod.Core.Types.HandlerData
                                        Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                     ->_R Sym (GHC.Types.NTCo:IO[0] <a159>_R))
                                    (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                              <Main.Pagina>_N <GHC.Types.IO>_N <a159>_N)))
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Database.Persist.Sql.Types.SqlBackend>_R
                                    <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                                    <a159>_N))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
                  (Main.$fYesodPersistPagina_$s$fFunctorReaderT_$cfmap @ r)
                  (Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$
                     @ r
                     @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                     Main.$fYesodPagina33) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO) a
    -> Control.Monad.Trans.Reader.ReaderT
         r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO) b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r
                   @ a159
                   @ b
                   f :: a159 -> b
                   m2 :: Control.Monad.Trans.Reader.ReaderT
                           r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO) a159
                   x13 :: r ->
                 Yesod.Core.Types.$fFunctorHandlerT_$cfmap
                   @ Main.Pagina
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ a159
                   @ b
                   f
                   (m2
                      `cast`
                    (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                         <r>_R
                         <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                         <a159>_N)
                      x13))
                  `cast`
                (forall r a159 b.
                 <a159 -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO) a159>_R
                 ->_R Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                               <r>_R
                               <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                               <b>_N)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fMonadBaseControlbHandlerT ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                  Main.$fYesodPagina29
                  (Yesod.Core.Types.$fMonadBaseControlbHandlerT_$cliftBaseWith
                     @ GHC.Types.IO
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina29
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO)
                  (Yesod.Core.Types.$fMonadBaseControlbHandlerT_$crestoreM
                     @ GHC.Types.IO
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$fYesodPagina29
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fMonadReaderT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       Database.Persist.Sql.Types.SqlBackend
                       (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO))
                  Main.$fYesodPersistPagina5
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$c>>=
                     @ Database.Persist.Sql.Types.SqlBackend
                     @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                     Main.$fYesodPersistPagina5
                     Main.$fYesodPagina30)
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$c>>
                     @ Database.Persist.Sql.Types.SqlBackend
                     @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                     Main.$fYesodPersistPagina5
                     Main.$fYesodPagina30)
                  Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$cpure
                  Main.$fYesodPersistPagina_$s$fMonadReaderT_$cfail -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $fYesodPersistPagina_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
         a
  {- Arity: 2, Strictness: <B,U><B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a159
                   msg :: GHC.Base.String
                   eta :: Database.Persist.Sql.Types.SqlBackend ->
                 Main.$fYesodPagina31 @ a159 msg)
                  `cast`
                (forall a159.
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                               <Database.Persist.Sql.Types.SqlBackend>_R
                               <Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO>_R
                               <a159>_N)) -}
489c8d1e57e278003c18628691ff28fb
  $s$fApplicativeLoggingT ::
    GHC.Base.Applicative (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fApplicativeLoggingT1
                  Main.$s$fApplicativeLoggingT_$s$fApplicativeLoggingT_$cpure
                  (Control.Monad.Logger.$fApplicativeLoggingT_$c<*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeLoggingT1
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Logger.$fApplicativeLoggingT_$c*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeLoggingT1
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Logger.$fApplicativeLoggingT_$c<*
                     @ GHC.Types.IO
                     Main.$s$fApplicativeLoggingT1
                     GHC.Base.$fMonadIO) -}
dca8ced4b5293ce94316688510f56f99
  $s$fApplicativeLoggingT1 ::
    GHC.Base.Functor (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeLoggingT_$s$fFunctorLoggingT -}
39da4551467644ad03a6bf8d9d1c3a84
  $s$fApplicativeLoggingT_$s$fApplicativeLoggingT_$cpure ::
    a -> Control.Monad.Logger.LoggingT GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a159
                   eta :: a159
                   eta2 :: Language.Haskell.TH.Syntax.Loc
                           -> Control.Monad.Logger.LogSource
                           -> Control.Monad.Logger.LogLevel
                           -> System.Log.FastLogger.LogStr.LogStr
                           -> GHC.Types.IO ()
                   eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO @ a159 eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a159>_R)
                   eta3)
                  `cast`
                (forall a159.
                 <a159>_R
                 ->_R Trans
                          (<Language.Haskell.TH.Syntax.Loc
                            -> Control.Monad.Logger.LogSource
                            -> Control.Monad.Logger.LogLevel
                            -> System.Log.FastLogger.LogStr.LogStr
                            -> GHC.Types.IO ()>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a159>_R))
                          (Sym (Control.Monad.Logger.NTCo:LoggingT[0]
                                    <GHC.Types.IO>_R <a159>_N))) -}
9a69d6f9579c6eba9301857c49385c64
  $s$fApplicativeLoggingT_$s$fFunctorLoggingT ::
    GHC.Base.Functor (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  (Control.Monad.Logger.$fFunctorLoggingT_$cfmap
                     @ GHC.Types.IO
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Logger.$fFunctorLoggingT_$c<$
                     @ GHC.Types.IO
                     GHC.Base.$fMonadIO) -}
495447d84b18dc0cfba8e0ef679ffd5a
  $s$fApplicativeNoLoggingT ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fApplicativeNoLoggingT2
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$cpure
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT2
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*>
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT2
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c*>
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT2
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT2
                     Main.$s$fApplicativeNoLoggingT1) -}
a9d8370ba2a2c896b339fc9fc9f38f4e
  $s$fApplicativeNoLoggingT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Network.Wai.Parse.$s$fMonadBasebResourceT_$s$fMonadResourceT -}
eda9fc7cdbe00e0e9466d74f8b0f930c
  $s$fApplicativeNoLoggingT2 ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT -}
87a282a0e1709b5112f8e14cae6a0769
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  (Control.Monad.Logger.$fFunctorNoLoggingT_$cfmap
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fFunctorNoLoggingT_$c<$
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT1) -}
a85986af257280c5242150ef544ba36d
  $s$fApplicativeWidgetT ::
    GHC.Base.Applicative
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fApplicativeWidgetT1
                  Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
                  (Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fApplicativeWidgetT1
                     GHC.Base.$fMonadIO)
                  Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*>
                  Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<* -}
f9a1483b6665b7e3b823e886ab59d0a1
  $s$fApplicativeWidgetT1 ::
    GHC.Base.Functor
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Yesod.Core.Class.Yesod.$s$fFunctorWidgetT @ Main.Pagina) -}
ae2e5b41b1825d5391e00d567c224371
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*> ::
    Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a159
                   @ b
                   eta :: Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a159
                   eta2 :: Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b ->
                 Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                   @ Main.Pagina
                   @ GHC.Types.IO
                   Main.$s$fApplicativeWidgetT1
                   GHC.Base.$fMonadIO
                   @ b
                   @ b
                   (Yesod.Core.Class.Yesod.$s$fFunctorWidgetT_$s$fFunctorWidgetT_$c<$
                      @ Main.Pagina
                      @ (b -> b)
                      @ a159
                      (GHC.Base.id @ b)
                      eta)
                   eta2) -}
7ee4d2fbb59b04ea328b9cd9c24163b1
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<* ::
    Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a159
                   @ b
                   eta :: Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a159
                   eta2 :: Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO b ->
                 Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                   @ Main.Pagina
                   @ GHC.Types.IO
                   Main.$s$fApplicativeWidgetT1
                   GHC.Base.$fMonadIO
                   @ b
                   @ a159
                   (Yesod.Core.Types.$fFunctorWidgetT_$cfmap
                      @ Main.Pagina
                      @ GHC.Types.IO
                      GHC.Base.$fMonadIO
                      @ a159
                      @ (b -> a159)
                      (GHC.Base.const @ a159 @ b)
                      eta)
                   eta2) -}
d88018e8092eb46c1417ef260247fc19
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure ::
    a -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a159
                   a160 :: a159
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO
                    @ (a159,
                       Yesod.Core.Types.GWData (Yesod.Routes.Class.Route Main.Pagina))
                    (a160,
                     Yesod.Core.Types.$fApplicativeWidgetT_$cmempty
                       @ (Yesod.Routes.Class.Route Main.Pagina)))
                   `cast`
                 (GHC.Types.NTCo:IO[0]
                      <(a159,
                        Yesod.Core.Types.GWData (Yesod.Routes.Class.Route Main.Pagina))>_R)
                   eta2)
                  `cast`
                (forall a159.
                 <a159>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <(a159,
                                           Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route Main.Pagina))>_R))
                          (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                    <Main.Pagina>_N <GHC.Types.IO>_N <a159>_N))) -}
d51ad45a4457684907db25d6161750bb
  $s$fMonadBaseControlbLoggingT ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbLoggingT_$dMonadBase
                  (Control.Monad.Logger.$fMonadBaseControlbLoggingT_$cliftBaseWith
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbLoggingT_$dMonadBase
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO)
                  (Control.Monad.Logger.$fMonadBaseControlbLoggingT_$crestoreM
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbLoggingT_$dMonadBase
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO) -}
073c2eb4d7d58d8bf7f19338d36dadec
  $s$fMonadBaseControlbLoggingT1 ::
    GHC.Base.Monad (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadBaseControlbLoggingT_$s$fMonadLoggingT -}
6eb2262e83ff78c04aee26e050bc9caf
  $s$fMonadBaseControlbLoggingT2 ::
    GHC.Base.String -> Control.Monad.Logger.LoggingT GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a159 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Control.Monad.Logger.LoggingT GHC.Types.IO a159)
                   eta) -}
479923540fdc4ba7babe2d507171c14a
  $s$fMonadBaseControlbLoggingT3 ::
    GHC.Base.Applicative (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeLoggingT -}
68d7fee06c271eb307a7be357e0edf00
  $s$fMonadBaseControlbLoggingT_$dMonadBase ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT -}
8aaec124a84dee00fe6b54d4f9765f85
  $s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$s$fMonadBaseControlbLoggingT3
                  GHC.Base.$fMonadIO
                  Main.$s$fMonadBaseControlbLoggingT1
                  Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT_$cliftBase -}
233f51b098d7dffdb7ab7e6f3f98bbb8
  $s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT_$cliftBase ::
    GHC.Types.IO α -> Control.Monad.Logger.LoggingT GHC.Types.IO α
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α eta :: GHC.Types.IO α ->
                 let {
                   eta2 :: GHC.Types.IO α = GHC.Base.id @ (GHC.Types.IO α) eta
                 } in
                 (\ ds2 :: Language.Haskell.TH.Syntax.Loc
                           -> Control.Monad.Logger.LogSource
                           -> Control.Monad.Logger.LogLevel
                           -> System.Log.FastLogger.LogStr.LogStr
                           -> GHC.Types.IO () ->
                  eta2)
                   `cast`
                 (Sym (Control.Monad.Logger.NTCo:LoggingT[0]
                           <GHC.Types.IO>_R <α>_N))) -}
2d0419dcc716559924884f0427f7b583
  $s$fMonadBaseControlbLoggingT_$s$fMonadLoggingT ::
    GHC.Base.Monad (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbLoggingT3
                  (Control.Monad.Logger.$fMonadLoggingT_$c>>=
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbLoggingT3
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Logger.$fMonadLoggingT_$c>>
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbLoggingT3
                     GHC.Base.$fMonadIO)
                  Main.$s$fApplicativeLoggingT_$s$fApplicativeLoggingT_$cpure
                  Main.$s$fMonadBaseControlbLoggingT2 -}
c71d7824556ccb2f761250ccfd9f5d6e
  $s$fMonadBasebWidgetT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$s$fMonadBasebWidgetT3
                  GHC.Base.$fMonadIO
                  Main.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadBasebWidgetT_$cliftBase
                     @ GHC.Types.IO
                     @ Main.Pagina
                     @ GHC.Types.IO
                     GHC.Base.$fApplicativeIO
                     Main.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO
                     Main.$s$fMonadBasebWidgetT1
                     Control.Monad.Base.$fMonadBaseIOIO) -}
545991c93f80f33501bb1b0c9c971a38
  $s$fMonadBasebWidgetT1 ::
    GHC.Base.Monad (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadBasebWidgetT_$s$fMonadWidgetT -}
5fd30b30696e8f4678f84c06bd789d64
  $s$fMonadBasebWidgetT2 ::
    GHC.Base.String
    -> Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a159 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO a159)
                   eta) -}
268e461077fb846e2ed90fa6e4e23c91
  $s$fMonadBasebWidgetT3 ::
    GHC.Base.Applicative
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeWidgetT -}
bb2d24a3dd5cd169ec44dfb018a5c140
  $s$fMonadBasebWidgetT_$s$fMonadWidgetT ::
    GHC.Base.Monad (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadBasebWidgetT3
                  (Yesod.Core.Types.$fMonadWidgetT_$c>>=
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fMonadWidgetT_$c>>
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO)
                  Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
                  Main.$s$fMonadBasebWidgetT2 -}
88129cc7349781d0a3aaba9af588247f
  $s$fMonadHandlerWidgetT ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadHandlerWidgetT1
                  (Yesod.Core.Class.Handler.$fMonadHandlerWidgetT_$cliftHandlerT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadHandlerWidgetT1
                     Main.$fYesodPagina27) -}
8de1a019c4f5e2a23b05b97af391b624
  $s$fMonadHandlerWidgetT1 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT -}
f9cc043f6e9b491ad48e0e1e6a4d41de
  $s$fMonadHandlerWidgetT2 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fMonadBasebWidgetT -}
5a2a58a6127fa793a031d5d37f7072ed
  $s$fMonadHandlerWidgetT3 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT -}
37522ebd654e49267143baa5d6390794
  $s$fMonadHandlerWidgetT4 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT -}
1ec0ac75ff77e486ade1781bfaa3681c
  $s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadIOWidgetT_$cliftIO
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadBasebWidgetT1
                     Control.Monad.IO.Class.$fMonadIOIO) -}
339e71e15fbab84cd09fd5354e6132c3
  $s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadHandlerWidgetT4
                  Main.$s$fMonadHandlerWidgetT3
                  Main.$s$fMonadBasebWidgetT3
                  Main.$s$fMonadHandlerWidgetT2
                  (Yesod.Core.Types.$fMonadResourceWidgetT_$cliftResourceT
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadHandlerWidgetT4
                     Main.$s$fMonadHandlerWidgetT3
                     Main.$s$fMonadBasebWidgetT3
                     Main.$s$fMonadHandlerWidgetT2
                     GHC.Base.$fApplicativeIO
                     Control.Monad.IO.Class.$fMonadIOIO
                     Control.Monad.Base.$fMonadBaseIOIO
                     Control.Monad.Catch.$fMonadThrowIO) -}
aa58e4e13d9cef7c0d6f7689473c74d4
  $s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO)
                  Main.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadThrowWidgetT_$cthrowM
                     @ Main.Pagina
                     @ GHC.Types.IO
                     Main.$s$fMonadBasebWidgetT1
                     Control.Monad.Catch.$fMonadThrowIO) -}
327f0fcf09977861d69dbdc3c49b8a38
  $s$fMonadIOLoggingT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbLoggingT1
                  Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT_$cliftBase -}
7eb1768161b627b73c56c59d6638f9e7
  $s$fMonadIONoLoggingT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fMonadIONoLoggingT2
                  (Control.Monad.Logger.$fMonadIONoLoggingT_$cliftIO
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT2
                     Main.$s$fMonadIONoLoggingT1) -}
d915f5dc63c1ae2980ad88bae7163a7b
  $s$fMonadIONoLoggingT1 ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Network.Wai.Parse.$s$fMonadIOResourceT -}
6d80efa88e564690aa17c33fef2a1ae3
  $s$fMonadIONoLoggingT2 ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT -}
24f7a059116499e32f254aeff1dce427
  $s$fMonadIONoLoggingT3 ::
    GHC.Base.String
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a159 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Control.Monad.Logger.NoLoggingT
                        (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                        a159)
                   eta) -}
f4959a34c00d1ff2bc6d711716ccdf98
  $s$fMonadIONoLoggingT4 ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT -}
ed6efae137db8eec01beb2f7df58c06b
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fMonadIONoLoggingT4
                  (Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT4
                     Main.$s$fApplicativeNoLoggingT1)
                  Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>
                  (Control.Monad.Logger.$fMonadNoLoggingT_$creturn
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT4
                     Main.$s$fApplicativeNoLoggingT1)
                  Main.$s$fMonadIONoLoggingT3 -}
eb4588b8b71f3cccbfe993be9d3edffa
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>> ::
    Control.Monad.Logger.NoLoggingT
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a159
                   @ b
                   m2 :: Control.Monad.Logger.NoLoggingT
                           (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a159
                   k2 :: Control.Monad.Logger.NoLoggingT
                           (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b ->
                 Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                   @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                   Main.$s$fMonadIONoLoggingT4
                   Main.$s$fApplicativeNoLoggingT1
                   @ a159
                   @ b
                   m2
                   (\ ds2 :: a159 -> k2)) -}
d849ea46aa794b62388419354ae31e67
  $s$fMonadLoggerLoggingT ::
    Control.Monad.Logger.MonadLogger
      (Control.Monad.Logger.LoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbLoggingT1
                  Main.$s$fMonadLoggerLoggingT_$s$fMonadLoggerLoggingT_$cmonadLoggerLog -}
23aeabf4e73b8bc1344690251406c46e
  $s$fMonadLoggerLoggingT_$s$fMonadLoggerLoggingT_$cmonadLoggerLog ::
    System.Log.FastLogger.LogStr.ToLogStr msg =>
    Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> msg
    -> Control.Monad.Logger.LoggingT GHC.Types.IO ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U(U,U))><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ msg
                   $dToLogStr :: System.Log.FastLogger.LogStr.ToLogStr msg
                   a159 :: Language.Haskell.TH.Syntax.Loc
                   b :: Control.Monad.Logger.LogSource
                   c :: Control.Monad.Logger.LogLevel
                   d :: msg ->
                 let {
                   lvl161 :: System.Log.FastLogger.LogStr.LogStr
                   = $dToLogStr
                       `cast`
                     (System.Log.FastLogger.LogStr.NTCo:ToLogStr[0] <msg>_N)
                       d
                 } in
                 (\ f :: Language.Haskell.TH.Syntax.Loc
                         -> Control.Monad.Logger.LogSource
                         -> Control.Monad.Logger.LogLevel
                         -> System.Log.FastLogger.LogStr.LogStr
                         -> GHC.Types.IO () ->
                  GHC.Base.id @ (GHC.Types.IO ()) (f a159 b c lvl161))
                   `cast`
                 (Sym (Control.Monad.Logger.NTCo:LoggingT[0]
                           <GHC.Types.IO>_R <()>_N))) -}
463086865df4da935c5954b19d8a952b
  $w$ccleanPath ::
    [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ w :: [Data.Text.Internal.Text] ->
                 let {
                   corrected :: [Data.Text.Internal.Text]
                   = GHC.List.filter @ Data.Text.Internal.Text Main.$fYesodPagina16 w
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        corrected
                        w of wild {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        corrected
                   GHC.Types.True
                   -> Data.Either.Right
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        (GHC.Base.map
                           @ Data.Text.Internal.Text
                           @ Data.Text.Internal.Text
                           Main.$fYesodPagina14
                           w) }) -}
51b580b4eef3af978bd95d69c35469a1
  $w$cfileUpload ::
    Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: Network.Wai.Internal.RequestBodyLength ->
                 case w of wild {
                   Network.Wai.Internal.ChunkedBody -> Main.$fYesodPagina5
                   Network.Wai.Internal.KnownLength size
                   -> case size of wild1 { GHC.Word.W64# a159 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# a159 __word 50000) of wild2 {
                        GHC.Types.False -> Main.$fYesodPagina5
                        GHC.Types.True -> Main.$fYesodPagina3 } } }) -}
9fa3042d95b6d4e6e58c1ad492a40124
  $w$cjoinPath ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Data.Text.Internal.Text
                   w1 :: [Data.Text.Internal.Text]
                   w2 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 let {
                   a159 :: [GHC.Types.Char]
                   = case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       a160 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                       = \ ww :: GHC.Prim.Int# ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww a160) of wild1 {
                           GHC.Types.False
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.geWord# r# __word 55296) of wild2 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1))
                                GHC.Types.True
                                -> case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                     GHC.Types.False
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1))
                                     GHC.Types.True
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                         10)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                                   65536)))
                                          ($wunfold (GHC.Prim.+# ww 2)) } } } }
                           GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt1 }
                 } in
                 let {
                   ds2 :: Data.ByteString.Builder.Internal.Builder
                   = case GHC.Base.map
                            @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                            @ (Data.ByteString.Internal.ByteString,
                               GHC.Base.Maybe Data.ByteString.Internal.ByteString)
                            Main.$fYesodPagina13
                            w2 of wild {
                       []
                       -> case w1 of wild1 {
                            []
                            -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodPagina12
                            : ds3 ds4
                            -> Network.HTTP.Types.URI.encodePathSegments
                                 (GHC.Base.map
                                    @ Data.Text.Internal.Text
                                    @ Data.Text.Internal.Text
                                    Main.$fYesodPagina11
                                    wild1) }
                       : ipv ipv1
                       -> let {
                            ds3 :: Data.ByteString.Builder.Internal.Builder
                            = case w1 of wild1 {
                                []
                                -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodPagina12
                                : ds4 ds5
                                -> Network.HTTP.Types.URI.encodePathSegments
                                     (GHC.Base.map
                                        @ Data.Text.Internal.Text
                                        @ Data.Text.Internal.Text
                                        Main.$fYesodPagina11
                                        wild1) }
                          } in
                          let {
                            ds4 :: Data.ByteString.Builder.Internal.Builder
                            = case ipv of ww { (,) ww1 ww2 ->
                              Network.HTTP.Types.URI.$wgo
                                Network.HTTP.Types.URI.encodePath1
                                  `cast`
                                (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0]))
                                ww1
                                ww2 }
                          } in
                          let {
                            ds5 :: Data.ByteString.Builder.Internal.Builder
                            = Network.HTTP.Types.URI.encodePath_go ipv1
                          } in
                          (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                           ds3 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                             @ r
                             (ds4 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                @ r
                                (ds5 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                   @ r
                                   eta)))
                            `cast`
                          (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])) }
                 } in
                 (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                  let {
                    w3 :: Data.ByteString.Builder.Internal.BufferRange
                          -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
                    = ds2 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                        @ r
                        eta
                  } in
                  \ w4 :: Data.ByteString.Builder.Internal.BufferRange
                    w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case w4 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                  Main.$wa4 @ r a159 w3 ww1 ww2 w5 })
                   `cast`
                 (Trans
                      (forall r.
                       <Data.ByteString.Builder.Internal.BuildStep r>_R
                       ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                      (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])))) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $w$cparseRoute ::
    [Data.Text.Internal.Text]
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Pagina)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
c92d59ccce001a0196410776041b6e0e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Database.Persist.Class.PersistEntity.Key Main.Users
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Database.Persist.Class.PersistEntity.Key Main.Users
                   w1 :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x13 :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowKey4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowKey3
                          (Database.Persist.Sql.Orphan.PersistStore.$w$cshowsPrec
                             0
                             w `cast`
                             (Trans (Sub (Main.TFCo:R:KeyUsers[0])) (Main.NTCo:R:KeyUsers[0]))
                             (GHC.Base.++ @ GHC.Types.Char Main.$fShowKey2 x13)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) }) -}
ad8416410222553536aff467632b3d5a
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 11,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.ByteArray#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   ww4 :: GHC.Prim.ByteArray#
                   ww5 :: GHC.Prim.Int#
                   ww6 :: GHC.Prim.Int#
                   ww7 :: GHC.Prim.ByteArray#
                   ww8 :: GHC.Prim.Int#
                   ww9 :: GHC.Prim.Int#
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x13 :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowUsers6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowUsers5
                          (case Data.Text.Show.$w$cshowsPrec
                                  (Data.Text.Internal.Text ww1 ww2 ww3)
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Main.$fShowUsers4
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        Main.$fShowUsers3
                                        (case Data.Text.Show.$w$cshowsPrec
                                                (Data.Text.Internal.Text ww4 ww5 ww6)
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Main.$fShowUsers4
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      Main.$fShowUsers2
                                                      (case Data.Text.Show.$w$cshowsPrec
                                                              (Data.Text.Internal.Text ww7 ww8 ww9)
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 Main.$fShowKey2
                                                                 x13) of ww10 { (#,#) ww11 ww12 ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         ww11
                                                         ww12 }))) of ww10 { (#,#) ww11 ww12 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           ww11
                                           ww12 }))) of ww10 { (#,#) ww11 ww12 ->
                           GHC.Types.: @ GHC.Types.Char ww11 ww12 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
c92d59ccce001a0196410776041b6e0e
  $w$ctoPersistValue ::
    Main.Users
    -> (# [(Data.Text.Internal.Text,
            Database.Persist.Types.Base.PersistValue)] #)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ w :: Main.Users ->
                 (# Main.$fPersistFieldUsers_$sgo
                      Main.$fPersistFieldUsers6
                      Main.$fPersistFieldUsers2
                      (case w of wild { Main.Users x13 x14 x15 ->
                       GHC.Base.map
                         @ Database.Persist.Class.PersistField.SomePersistField
                         @ Database.Persist.Types.Base.PersistValue
                         Database.Persist.Class.PersistField.$fPersistFieldSomePersistField_$ctoPersistValue
                         (GHC.Types.:
                            @ Database.Persist.Class.PersistField.SomePersistField
                            (Database.Persist.Class.PersistField.SomePersistField
                               @ Data.Text.Internal.Text
                               Database.Persist.Class.PersistField.$fPersistFieldText0
                               x13)
                            (GHC.Types.:
                               @ Database.Persist.Class.PersistField.SomePersistField
                               (Database.Persist.Class.PersistField.SomePersistField
                                  @ Data.Text.Internal.Text
                                  Database.Persist.Class.PersistField.$fPersistFieldText0
                                  x14)
                               (GHC.Types.:
                                  @ Database.Persist.Class.PersistField.SomePersistField
                                  (Database.Persist.Class.PersistField.SomePersistField
                                     @ Data.Text.Internal.Text
                                     Database.Persist.Class.PersistField.$fPersistFieldText0
                                     x15)
                                  (GHC.Types.[]
                                     @ Database.Persist.Class.PersistField.SomePersistField)))) }) #)) -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $w$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.Pagina
    -> Network.HTTP.Types.Method.Method
    -> Network.HTTP.Types.Version.HttpVersion
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Types.Header.RequestHeaders
    -> GHC.Types.Bool
    -> Network.Socket.Types.SockAddr
    -> [Data.Text.Internal.Text]
    -> Network.HTTP.Types.URI.Query
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> Data.Vault.Lazy.Vault
    -> Network.Wai.Internal.RequestBodyLength
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> (Network.Wai.Internal.Response
        -> GHC.Types.IO Network.Wai.Internal.ResponseReceived)
    -> GHC.Types.IO Network.Wai.Internal.ResponseReceived
  {- Arity: 17,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
006d1c496753dad0448788cc68b49210
  $w$sgo5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
c92d59ccce001a0196410776041b6e0e
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.Users
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $wa1 ::
    Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO res
    -> Yesod.Core.Types.YesodRequest
    -> Yesod.Core.Types.RunHandlerEnv Main.Pagina
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Yesod.Core.Types.GHState
    -> (Yesod.Routes.Class.Route Main.Pagina
        -> Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U(U,U)))><S,U><S,U><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
b39532abc8925dffa6bbb8682b3b63bb
  $wa2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Web.ClientSession.getDefaultKey2
                        Web.ClientSession.defaultKeyFile
                        w of ds2 { (#,#) ipv ipv1 ->
                 case Yesod.Core.Internal.Session.clientSessionDateCacher1
                        Main.$fYesodPagina7
                          `cast`
                        (Trans
                             (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                             (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) getCachedDate _closeDateCacher ->
                 (# ipv2,
                    GHC.Base.Just
                      @ Yesod.Core.Types.SessionBackend
                      (Yesod.Core.Class.Yesod.defaultClientSessionBackend3
                         ipv1
                         getCachedDate
                         Yesod.Core.Class.Yesod.defaultClientSessionBackend2)
                        `cast`
                      (Trans
                           (<Network.Wai.Internal.Request>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <(Data.Map.Base.Map
                                              Data.Text.Internal.Text
                                              Data.ByteString.Internal.ByteString,
                                            Yesod.Core.Types.SessionMap
                                            -> GHC.Types.IO [Yesod.Core.Types.Header])>_R))
                           (Sym (Yesod.Core.Types.NTCo:SessionBackend[0]))) #) } } }) -}
beb603e6978ef3fb3280584e8fbbcb69
  $wa3 ::
    Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Yesod.Core.Types.Logger
                   w1 :: Language.Haskell.TH.Syntax.Loc
                   w2 :: Control.Monad.Logger.LogSource
                   w3 :: Control.Monad.Logger.LogLevel
                   w4 :: System.Log.FastLogger.LogStr.LogStr
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ w6 :: GHC.Prim.Void#[OneShot] ->
                     case Yesod.Core.Class.Yesod.defaultMessageLoggerSource2
                            (Yesod.Core.Types.loggerDate w)
                            w1
                            w2
                            w3
                            w4
                            w5 of ds2 { (#,#) ipv2 ipv3 ->
                     Yesod.Core.Types.loggerPutStr1 w ipv3 ipv2 }
                 } in
                 case w3 of wild {
                   Control.Monad.Logger.LevelDebug -> (# w5, GHC.Tuple.() #)
                   Control.Monad.Logger.LevelInfo -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelWarn -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelError -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelOther a159 -> $j GHC.Prim.void# }) -}
f00410e3951c1ca52d21dcbef25d3d51
  $wa4 ::
    [GHC.Types.Char]
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U>, Inline: [0] -}
a7f6a2b85eb81b4fb537f36bbe1d3558
  $wa5 ::
    Yesod.Routes.Class.Route Main.Pagina
    -> Yesod.Core.Types.HandlerData
         Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.AuthResult #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ w :: Yesod.Routes.Class.Route Main.Pagina
                   w1 :: Yesod.Core.Types.HandlerData
                           Main.Pagina (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w `cast` (Sub (Main.TFCo:R:RoutePagina[0])) of wild {
                   DEFAULT
                   -> case (Main.$fYesodPagina39
                              `cast`
                            (Yesod.Core.Types.NTCo:HandlerT[0]
                                 <Main.Pagina>_N
                                 <GHC.Types.IO>_N
                                 <GHC.Base.Maybe Data.Text.Internal.Text>_N)
                              w1)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.Maybe Data.Text.Internal.Text>_R)
                             w2 of ds2 { (#,#) ipv ipv1 ->
                      (# ipv,
                         case ipv1 of wild1 {
                           GHC.Base.Nothing -> Yesod.Core.Types.AuthenticationRequired
                           GHC.Base.Just ds3 -> Yesod.Core.Types.Authorized } #) }
                   Main.LoginR -> (# w2, Yesod.Core.Types.Authorized #)
                   Main.UsuarioR -> (# w2, Yesod.Core.Types.Authorized #)
                   Main.ErroR -> (# w2, Yesod.Core.Types.Authorized #)
                   Main.AdminR
                   -> case (Main.$fYesodPagina39
                              `cast`
                            (Yesod.Core.Types.NTCo:HandlerT[0]
                                 <Main.Pagina>_N
                                 <GHC.Types.IO>_N
                                 <GHC.Base.Maybe Data.Text.Internal.Text>_N)
                              w1)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.Maybe Data.Text.Internal.Text>_R)
                             w2 of ds2 { (#,#) ipv ipv1 ->
                      (# ipv,
                         case ipv1 of wild1 {
                           GHC.Base.Nothing -> Yesod.Core.Types.AuthenticationRequired
                           GHC.Base.Just ds3
                           -> case ds3 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                              case Main.$fRenderRoutePagina6 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.==# dt2 dt5) of wild4 {
                                GHC.Types.False -> Main.$fYesodPagina37
                                GHC.Types.True
                                -> case {__pkg_ccall text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                              -> GHC.Prim.Word#
                                                                                                              -> GHC.Prim.ByteArray#
                                                                                                              -> GHC.Prim.Word#
                                                                                                              -> GHC.Prim.Word#
                                                                                                              -> GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                              -> (# GHC.Prim.State#
                                                                                                                      GHC.Prim.RealWorld,
                                                                                                                    GHC.Prim.Int# #)}
                                          dt
                                          (GHC.Prim.int2Word# dt1)
                                          dt3
                                          (GHC.Prim.int2Word# dt4)
                                          (GHC.Prim.int2Word# dt2)
                                          GHC.Prim.realWorld# of wild5 { (#,#) ds11 ds12 ->
                                   case GHC.Prim.narrow32Int# ds12 of wild6 {
                                     DEFAULT -> Main.$fYesodPagina37
                                     0 -> Yesod.Core.Types.Authorized } } } } } } #) } }) -}
63dc34984f013c21bca8ebeee5bc9557
  type Form a =
    Text.Blaze.Html.Html
    -> Yesod.Form.Types.MForm
         Main.Handler (Yesod.Form.Types.FormResult a, Main.Widget)
908c1e3081992784db710805c1683076
  type Handler = Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO
a7f6a2b85eb81b4fb537f36bbe1d3558
  data Pagina
    = Pagina {connPool :: Database.Persist.Sql.Types.ConnectionPool}
c92d59ccce001a0196410776041b6e0e
  data instance Database.Persist.Class.PersistEntity.EntityField
                  Main.Users typ where
    UsersId :: typ
               ~ Database.Persist.Class.PersistEntity.Key Main.Users =>
               Database.Persist.Class.PersistEntity.EntityField Main.Users typ
    UsersNome :: typ ~ Data.Text.Internal.Text =>
                 Database.Persist.Class.PersistEntity.EntityField Main.Users typ
    UsersLogin :: typ ~ Data.Text.Internal.Text =>
                  Database.Persist.Class.PersistEntity.EntityField Main.Users typ
    UsersSenha :: typ ~ Data.Text.Internal.Text =>
                  Database.Persist.Class.PersistEntity.EntityField Main.Users typ
    RecFlag: Recursive
c92d59ccce001a0196410776041b6e0e
  newtype instance Database.Persist.Class.PersistEntity.Key
                     Main.Users
    = UsersKey {unUsersKey :: Database.Persist.Class.PersistStore.BackendKey
                                Database.Persist.Sql.Types.SqlBackend}
    RecFlag: Recursive
a7f6a2b85eb81b4fb537f36bbe1d3558
  data instance Yesod.Routes.Class.Route Main.Pagina
    = HomeR
    | LoginR
    | UsuarioR
    | PerfilR Main.UsersId
    | ErroR
    | AdminR
    | LogoutR
    | WhoisR
    RecFlag: Recursive
babebdf9c0ce19c175c15aca876dcddf
  data instance Database.Persist.Class.PersistEntity.Unique
                  Main.Users
    RecFlag: Recursive
c92d59ccce001a0196410776041b6e0e
  axiom TFCo:R:EntityFieldUserstyp::
      Database.Persist.Class.PersistEntity.EntityField Main.Users
        = Main.R:EntityFieldUserstyp
c92d59ccce001a0196410776041b6e0e
  axiom TFCo:R:KeyUsers::
      Database.Persist.Class.PersistEntity.Key Main.Users
        = Main.R:KeyUsers
c92d59ccce001a0196410776041b6e0e
  axiom TFCo:R:PersistEntityBackendUsers::
      Database.Persist.Class.PersistEntity.PersistEntityBackend
        Main.Users
        = Database.Persist.Sql.Types.SqlBackend
a7f6a2b85eb81b4fb537f36bbe1d3558
  axiom TFCo:R:RoutePagina::
      Yesod.Routes.Class.Route Main.Pagina = Main.R:RoutePagina
babebdf9c0ce19c175c15aca876dcddf
  axiom TFCo:R:UniqueUsers::
      Database.Persist.Class.PersistEntity.Unique Main.Users
        = Main.R:UniqueUsers
a7f6a2b85eb81b4fb537f36bbe1d3558
  axiom TFCo:R:YesodPersistBackendPagina::
      Yesod.Persist.Core.YesodPersistBackend Main.Pagina
        = Database.Persist.Sql.Types.SqlBackend
c92d59ccce001a0196410776041b6e0e
  data Users
    = Users {usersNome :: !Data.Text.Internal.Text,
             usersLogin :: !Data.Text.Internal.Text,
             usersSenha :: !Data.Text.Internal.Text}
1c4b15801e67db5bf808d70f047f101c
  type UsersId = Database.Persist.Class.PersistEntity.Key Main.Users
0fde889d0b0bbc7bb22e28104f48f8bc
  type Widget = Yesod.Core.Types.WidgetT Main.Pagina GHC.Types.IO ()
6f8121b1e8ce35d35f7f4422bd07b37b
  connPool ::
    Main.Pagina -> Database.Persist.Sql.Types.ConnectionPool
  RecSel Main.Pagina
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(U,U,U,U,U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds2 :: Main.Pagina ->
                 case ds2 of wild { Main.Pagina ds3 -> ds3 }) -}
f0b54d6b61dbe6a3528ef43449ca4bcb
  main :: GHC.Types.IO ()
  {- Unfolding: ((Main.main13
                    Main.main12
                    Main.main1
                      `cast`
                    (<Database.Persist.Sql.Types.ConnectionPool>_R
                     ->_R Trans
                              (<Language.Haskell.TH.Syntax.Loc
                                -> Control.Monad.Logger.LogSource
                                -> Control.Monad.Logger.LogLevel
                                -> System.Log.FastLogger.LogStr.LogStr
                                -> GHC.Types.IO ()>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                              (Sym (Control.Monad.Logger.NTCo:LoggingT[0]
                                        <GHC.Types.IO>_R <()>_N))))
                   `cast`
                 (Control.Monad.Logger.NTCo:LoggingT[0] <GHC.Types.IO>_R <()>_N)
                   Control.Monad.Logger.runStdoutLoggingT1
                     `cast`
                   (<Language.Haskell.TH.Syntax.Loc>_R
                    ->_R <Control.Monad.Logger.LogSource>_R
                    ->_R <Control.Monad.Logger.LogLevel>_R
                    ->_R <System.Log.FastLogger.LogStr.LogStr>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
68f6a4884c63fad0f9f2e21ac131996a
  main1 ::
    Database.Persist.Sql.Types.ConnectionPool
    -> (Language.Haskell.TH.Syntax.Loc
        -> Control.Monad.Logger.LogSource
        -> Control.Monad.Logger.LogLevel
        -> System.Log.FastLogger.LogStr.LogStr
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Unfolding: (\ pool :: Database.Persist.Sql.Types.ConnectionPool
                   eta :: Language.Haskell.TH.Syntax.Loc
                          -> Control.Monad.Logger.LogSource
                          -> Control.Monad.Logger.LogLevel
                          -> System.Log.FastLogger.LogStr.LogStr
                          -> GHC.Types.IO ()
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Control.Monad.Trans.Resource.runResourceT
                         @ GHC.Types.IO
                         @ ()
                         Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                         (Database.Persist.Sql.Run.$swithResource1
                            @ Database.Persist.Sql.Types.SqlBackend
                            @ ()
                            pool
                            Main.main3)
                           `cast`
                         (Trans
                              (<GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                              (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                        <GHC.Types.IO>_R <()>_N))))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <()>_R)
                        eta2 of ds2 { (#,#) ipv ipv1 ->
                 Yesod.Core.Dispatch.warp1
                   @ Main.Pagina
                   Main.$fYesodDispatchPagina
                   Main.main2
                   (Main.Pagina pool)
                   ipv }) -}
384a884936540390b1cdd921df45cfa8
  main10 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "login"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityUsers4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
6580c6b7116fe6ca3be29b276d8b7170
  main11 :: [Database.Persist.Types.Base.EntityDef]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EntityDef
                   Main.main6
                   (GHC.Types.[] @ Database.Persist.Types.Base.EntityDef)) -}
0d439819aa4ed16ecc9079b8346ad147
  main12 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10) -}
cde29dc3013a32b995935dfb676d3add
  main13 ::
    GHC.Types.Int
    -> (Database.Persist.Sql.Types.ConnectionPool
        -> Control.Monad.Logger.LoggingT GHC.Types.IO ())
    -> Control.Monad.Logger.LoggingT GHC.Types.IO ()
  {- Unfolding: (Database.Persist.Postgresql.withPostgresqlPool
                   @ (Control.Monad.Logger.LoggingT GHC.Types.IO)
                   @ ()
                   Main.$s$fMonadBaseControlbLoggingT
                   Main.$s$fMonadLoggerLoggingT
                   Main.$s$fMonadIOLoggingT
                   Main.main14) -}
7a69af086e3d29e747cacdf4c6a77c95
  main14 :: Database.Persist.Postgresql.ConnectionString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr#
                   = "dbname=d44ad2c52pllg5 host=ec2-23-21-165-183.compute-1.amazonaws.com user=fxrcsnghafllog password=d0zf-NvDxQLWwixp7bzdnc88xO port=5432"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
425656ea622f235d9518f3c737098f12
  main15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1 @ () Main.main) -}
00fde0c9dd045d16140bf6fe327cb707
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8080) -}
dfcf3759309700d2f079849b5b1530b7
  main3 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) ()
  {- Arity: 1,
     Unfolding: (Database.Persist.Sql.Run.liftSqlPersistMPool_$srunSqlConn
                   @ ()
                   Main.main4
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Database.Persist.Sql.Types.SqlBackend>_R
                             <Control.Monad.Logger.NoLoggingT
                                (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)>_R
                             <()>_N))) -}
b7226cfce6b9a3b61df3390e021f7324
  main4 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   a159 :: Control.Monad.Logger.NoLoggingT
                             (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                             [Data.Text.Internal.Text]
                   = Database.Persist.Sql.Migration.runMigration1
                       @ (Control.Monad.Logger.NoLoggingT
                            (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                       Main.$s$fMonadIONoLoggingT
                       Main.main5
                         `cast`
                       (Trans
                            (<Database.Persist.Sql.Types.SqlBackend>_R
                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                           <(((), [Data.Text.Internal.Text]),
                                             [(GHC.Types.Bool,
                                               Database.Persist.Sql.Types.Sql)])>_R))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                           <Database.Persist.Sql.Types.SqlBackend>_R
                                           <GHC.Types.IO>_R
                                           <(((), [Data.Text.Internal.Text]),
                                             [(GHC.Types.Bool,
                                               Database.Persist.Sql.Types.Sql)])>_N))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                <[(GHC.Types.Bool,
                                                   Database.Persist.Sql.Types.Sql)]>_N
                                                <Control.Monad.Trans.Reader.ReaderT
                                                   Database.Persist.Sql.Types.SqlBackend
                                                   GHC.Types.IO>_R
                                                <((), [Data.Text.Internal.Text])>_N))
                                      (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                <[Data.Text.Internal.Text]>_N
                                                <Control.Monad.Trans.Writer.Lazy.WriterT
                                                   Database.Persist.Sql.Types.CautiousMigration
                                                   (Control.Monad.Trans.Reader.ReaderT
                                                      Database.Persist.Sql.Types.SqlBackend
                                                      GHC.Types.IO)>_R
                                                <()>_N)))))
                       GHC.Types.False
                       eta
                 } in
                 (\ r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (a159
                          `cast`
                        (Trans
                             (Control.Monad.Logger.NTCo:NoLoggingT[0]
                                  <Control.Monad.Trans.Resource.Internal.ResourceT
                                     GHC.Types.IO>_R <[Data.Text.Internal.Text]>_N)
                             (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                  <GHC.Types.IO>_R <[Data.Text.Internal.Text]>_N))
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0] <[Data.Text.Internal.Text]>_R)
                         s of ds2 { (#,#) ipv ipv1 ->
                  (# ipv, GHC.Tuple.() #) })
                   `cast`
                 (Trans
                      (<GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                     <GHC.Types.IO>_R <()>_N))
                           (Sym (Control.Monad.Logger.NTCo:NoLoggingT[0]
                                     <Control.Monad.Trans.Resource.Internal.ResourceT
                                        GHC.Types.IO>_R) <()>_N)))) -}
cda01d12484d1653a67d1c60b3ce7484
  main5 ::
    Database.Persist.Sql.Types.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (((), [Data.Text.Internal.Text]),
           [(GHC.Types.Bool, Database.Persist.Sql.Types.Sql)]) #)
  {- Arity: 2,
     Strictness: <S(LLLLLC(C(C(C(S(LS)))))LLLLLLLL),1*U(C(C1(U(U,U(C(U(U,A)),C(U(U,U)),C(C1(U(U,U))),C(C1(C1(C1(U)))))))),A,A,U(U),A,1*C1(C1(C1(C1(U(U,1*U))))),A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ w2 :: Database.Persist.Sql.Types.SqlBackend
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Database.Persist.Sql.Types.SqlBackend ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Database.Persist.Sql.Migration.$wa
                   Main.main11
                   Main.main6
                   ww1
                   ww4
                   ww6
                   w3 }) -}
6ea330a6b5fe645aecd381c025f7294a
  main6 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Users"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "users"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Yesod.Core.Types.$fSerializeSessionCookie_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntityUsers13
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntityUsers9))
                   Main.$fPersistEntityUsers23
                   Main.main7
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntityUsers16
                   dt
                   GHC.Types.False } } } } }) -}
a8f73a06a87b4ca4fed8b9e9ab685f2e
  main7 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityUsers7
                   Main.main8) -}
4e3a94c7260f6177e2cb880af8271024
  main8 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.main10
                   Main.main9) -}
eca76e77e8400c763bfe940adb46e78b
  main9 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityUsers3
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
c92d59ccce001a0196410776041b6e0e
  unUsersKey ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistStore.BackendKey
         Database.Persist.Sql.Types.SqlBackend
  RecSel Main.R:KeyUsers
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.unUsersKey1
                  `cast`
                (<Database.Persist.Class.PersistEntity.Key Main.Users>_R
                 ->_R Trans
                          (Sub (Main.TFCo:R:KeyUsers[0])) (Main.NTCo:R:KeyUsers[0])) -}
c92d59ccce001a0196410776041b6e0e
  unUsersKey1 ::
    Database.Persist.Class.PersistEntity.Key Main.Users
    -> Database.Persist.Class.PersistEntity.Key Main.Users
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds2 :: Database.Persist.Class.PersistEntity.Key Main.Users ->
                 ds2) -}
6d040c7ac38072608b28e2b17dc8ed09
  usersLogin :: Main.Users -> Data.Text.Internal.Text
  RecSel Main.Users
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSS),1*U(1*H,U(U,U,U),1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds2 :: Main.Users ->
                 case ds2 of wild { Main.Users ds3 ds4 ds5 -> ds4 }) -}
49e12c2a7c0b171d630ee648b04204be
  usersNome :: Main.Users -> Data.Text.Internal.Text
  RecSel Main.Users
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSS),1*U(U(U,U,U),1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds2 :: Main.Users ->
                 case ds2 of wild { Main.Users ds3 ds4 ds5 -> ds3 }) -}
bd7f8025785530cf490c7cbd5ea188a7
  usersSenha :: Main.Users -> Data.Text.Internal.Text
  RecSel Main.Users
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSS),1*U(1*H,1*H,U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds2 :: Main.Users ->
                 case ds2 of wild { Main.Users ds3 ds4 ds5 -> ds5 }) -}
instance GHC.Classes.Eq [Database.Persist.Class.PersistEntity.Key]
  = Main.$fEqKey
instance GHC.Classes.Eq [Yesod.Routes.Class.Route] = Main.$fEqRoute
instance Web.HttpApiData.Internal.FromHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromHttpApiDataKey
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fFromJSONEntity
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromJSONKey
instance Data.Aeson.Types.Class.FromJSON [Main.Users]
  = Main.$fFromJSONUsers
instance GHC.Classes.Ord [Database.Persist.Class.PersistEntity.Key]
  = Main.$fOrdKey
instance Yesod.Routes.Class.ParseRoute [Main.Pagina]
  = Main.$fParseRoutePagina
instance Web.PathPieces.PathPiece [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPathPieceKey
instance Database.Persist.Class.PersistEntity.PersistEntity [Main.Users]
  = Main.$fPersistEntityUsers
instance Database.Persist.Class.PersistField.PersistField [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldKey
instance Database.Persist.Sql.Class.PersistFieldSql [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldSqlKey
instance Database.Persist.Sql.Class.PersistFieldSql [Main.Users]
  = Main.$fPersistFieldSqlUsers
instance Database.Persist.Class.PersistField.PersistField [Main.Users]
  = Main.$fPersistFieldUsers
instance GHC.Read.Read [Database.Persist.Class.PersistEntity.Key]
  = Main.$fReadKey
instance GHC.Read.Read [Yesod.Routes.Class.Route]
  = Main.$fReadRoute
instance Text.Shakespeare.I18N.RenderMessage [Main.Pagina,
                                              Yesod.Form.Types.FormMessage]
  = Main.$fRenderMessagePaginaFormMessage
instance Yesod.Routes.Class.RenderRoute [Main.Pagina]
  = Main.$fRenderRoutePagina
instance Yesod.Routes.Class.RouteAttrs [Main.Pagina]
  = Main.$fRouteAttrsPagina
instance GHC.Show.Show [Database.Persist.Class.PersistEntity.Key]
  = Main.$fShowKey
instance GHC.Show.Show [Yesod.Routes.Class.Route]
  = Main.$fShowRoute
instance GHC.Show.Show [Main.Users] = Main.$fShowUsers
instance Database.Persist.Class.PersistStore.ToBackendKey [Database.Persist.Sql.Types.SqlBackend,
                                                           Main.Users]
  = Main.$fToBackendKeySqlBackendUsers
instance Web.HttpApiData.Internal.ToHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToHttpApiDataKey
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fToJSONEntity
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToJSONKey
instance Data.Aeson.Types.Class.ToJSON [Main.Users]
  = Main.$fToJSONUsers
instance Yesod.Core.Class.Dispatch.YesodDispatch [Main.Pagina]
  = Main.$fYesodDispatchPagina
instance Yesod.Core.Class.Yesod.Yesod [Main.Pagina]
  = Main.$fYesodPagina
instance Yesod.Persist.Core.YesodPersist [Main.Pagina]
  = Main.$fYesodPersistPagina
family instance Database.Persist.Class.PersistEntity.EntityField [Main.Users]
  = Main.TFCo:R:EntityFieldUserstyp
family instance Database.Persist.Class.PersistEntity.Key [Main.Users]
  = Main.TFCo:R:KeyUsers
family instance Database.Persist.Class.PersistEntity.PersistEntityBackend [Main.Users]
  = Main.TFCo:R:PersistEntityBackendUsers
family instance Yesod.Routes.Class.Route [Main.Pagina]
  = Main.TFCo:R:RoutePagina
family instance Database.Persist.Class.PersistEntity.Unique [Main.Users]
  = Main.TFCo:R:UniqueUsers
family instance Yesod.Persist.Core.YesodPersistBackend [Main.Pagina]
  = Main.TFCo:R:YesodPersistBackendPagina
"SPEC/Main $WUsersId @ (Key Users)" [ALWAYS] forall dt :: Database.Persist.Class.PersistEntity.Key
                                                            Main.Users
                                                          ~ Database.Persist.Class.PersistEntity.Key
                                                              Main.Users
  Main.$WUsersId @ (Database.Persist.Class.PersistEntity.Key
                      Main.Users)
                 dt
  = Main.$fPersistEntityUsers_$s$WUsersId
"SPEC/Main $dmapproot @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                             Main.Pagina
  Yesod.Core.Class.Yesod.$dmapproot @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmapproot
"SPEC/Main $dmjsLoader @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                              Main.Pagina
  Yesod.Core.Class.Yesod.$dmjsLoader @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmjsLoader
"SPEC/Main $dmmaximumContentLength @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                          Main.Pagina
  Yesod.Core.Class.Yesod.$dmmaximumContentLength @ Main.Pagina
                                                 $dYesod
  = Main.$fYesodPagina_$s$dmmaximumContentLength
"SPEC/Main $dmreadsPrec @ (Key Users)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   (Database.Persist.Class.PersistEntity.Key
                                                                      Main.Users)
  GHC.Read.$dmreadsPrec @ (Database.Persist.Class.PersistEntity.Key
                             Main.Users)
                        $dRead
  = Main.$fReadKey_$s$dmreadsPrec
"SPEC/Main $dmreadsPrec @ (Route Pagina)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      (Yesod.Routes.Class.Route
                                                                         Main.Pagina)
  GHC.Read.$dmreadsPrec @ (Yesod.Routes.Class.Route Main.Pagina)
                        $dRead
  = Main.$fReadRoute_$s$dmreadsPrec
"SPEC/Main $dmshouldLog @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                               Main.Pagina
  Yesod.Core.Class.Yesod.$dmshouldLog @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmshouldLog
"SPEC/Main $dmurlRenderOverride @ Pagina" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                       Main.Pagina
  Yesod.Core.Class.Yesod.$dmurlRenderOverride @ Main.Pagina $dYesod
  = Main.$fYesodPagina_$s$dmurlRenderOverride
"SPEC/Main $fApplicativeHandlerT @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                               (Yesod.Core.Types.HandlerT
                                                                                  Main.Pagina
                                                                                  GHC.Types.IO)
                                                                $dMonad :: GHC.Base.Monad
                                                                             GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT @ Main.Pagina
                                         @ GHC.Types.IO
                                         $dFunctor
                                         $dMonad
  = Main.$fYesodPagina_$s$fApplicativeHandlerT
"SPEC/Main $fApplicativeHandlerT_$cpure @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                      (Yesod.Core.Types.HandlerT
                                                                                         Main.Pagina
                                                                                         GHC.Types.IO)
                                                                       $dMonad :: GHC.Base.Monad
                                                                                    GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT_$cpure @ Main.Pagina
                                                @ GHC.Types.IO
                                                $dFunctor
                                                $dMonad
  = Main.$fYesodPagina_$s$fApplicativeHandlerT_$cpure
"SPEC/Main $fApplicativeLoggingT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                      (Control.Monad.Logger.LoggingT
                                                                         GHC.Types.IO)
                                                       $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Logger.$fApplicativeLoggingT @ GHC.Types.IO
                                             $dFunctor
                                             $dMonad
  = Main.$s$fApplicativeLoggingT
"SPEC/Main $fApplicativeLoggingT_$cpure @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                             (Control.Monad.Logger.LoggingT
                                                                                GHC.Types.IO)
                                                              $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Logger.$fApplicativeLoggingT_$cpure @ GHC.Types.IO
                                                    $dFunctor
                                                    $dMonad
  = Main.$s$fApplicativeLoggingT_$s$fApplicativeLoggingT_$cpure
"SPEC/Main $fApplicativeNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                    (Control.Monad.Logger.NoLoggingT
                                                                                       (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                          GHC.Types.IO))
                                                                     $dMonad :: GHC.Base.Monad
                                                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                     GHC.Types.IO)
  Control.Monad.Logger.$fApplicativeNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                    GHC.Types.IO)
                                               $dFunctor
                                               $dMonad
  = Main.$s$fApplicativeNoLoggingT
"SPEC/Main $fApplicativeReaderT @ SqlBackend @ (HandlerT Pagina IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                    (Control.Monad.Trans.Reader.ReaderT
                                                                                                       Database.Persist.Sql.Types.SqlBackend
                                                                                                       (Yesod.Core.Types.HandlerT
                                                                                                          Main.Pagina
                                                                                                          GHC.Types.IO))
                                                                                     $dApplicative :: GHC.Base.Applicative
                                                                                                        (Yesod.Core.Types.HandlerT
                                                                                                           Main.Pagina
                                                                                                           GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ Database.Persist.Sql.Types.SqlBackend
                                                  @ (Yesod.Core.Types.HandlerT
                                                       Main.Pagina GHC.Types.IO)
                                                  $dFunctor
                                                  $dApplicative
  = Main.$fYesodPersistPagina_$s$fApplicativeReaderT
"SPEC/Main $fApplicativeReaderT_$c*> @ SqlBackend @ (HandlerT
                                                      Pagina IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                                                                               (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                  Database.Persist.Sql.Types.SqlBackend
                                                                                                                                                                  (Yesod.Core.Types.HandlerT
                                                                                                                                                                     Main.Pagina
                                                                                                                                                                     GHC.Types.IO))
                                                                                                                                                $dApplicative :: GHC.Base.Applicative
                                                                                                                                                                   (Yesod.Core.Types.HandlerT
                                                                                                                                                                      Main.Pagina
                                                                                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ Database.Persist.Sql.Types.SqlBackend
                                                       @ (Yesod.Core.Types.HandlerT
                                                            Main.Pagina GHC.Types.IO)
                                                       $dFunctor
                                                       $dApplicative
  = Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$c*>
"SPEC/Main $fApplicativeReaderT_$c<* @ SqlBackend @ (HandlerT
                                                      Pagina IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                                                                               (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                  Database.Persist.Sql.Types.SqlBackend
                                                                                                                                                                  (Yesod.Core.Types.HandlerT
                                                                                                                                                                     Main.Pagina
                                                                                                                                                                     GHC.Types.IO))
                                                                                                                                                $dApplicative :: GHC.Base.Applicative
                                                                                                                                                                   (Yesod.Core.Types.HandlerT
                                                                                                                                                                      Main.Pagina
                                                                                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ Database.Persist.Sql.Types.SqlBackend
                                                       @ (Yesod.Core.Types.HandlerT
                                                            Main.Pagina GHC.Types.IO)
                                                       $dFunctor
                                                       $dApplicative
  = Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$c<*
"SPEC/Main $fApplicativeReaderT_$cpure @ SqlBackend @ (HandlerT
                                                        Pagina IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                      Database.Persist.Sql.Types.SqlBackend
                                                                                                                                                                      (Yesod.Core.Types.HandlerT
                                                                                                                                                                         Main.Pagina
                                                                                                                                                                         GHC.Types.IO))
                                                                                                                                                    $dApplicative :: GHC.Base.Applicative
                                                                                                                                                                       (Yesod.Core.Types.HandlerT
                                                                                                                                                                          Main.Pagina
                                                                                                                                                                          GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$cpure @ Database.Persist.Sql.Types.SqlBackend
                                                         @ (Yesod.Core.Types.HandlerT
                                                              Main.Pagina GHC.Types.IO)
                                                         $dFunctor
                                                         $dApplicative
  = Main.$fYesodPersistPagina_$s$fApplicativeReaderT_$cpure
"SPEC/Main $fApplicativeWidgetT @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                              (Yesod.Core.Types.WidgetT
                                                                                 Main.Pagina
                                                                                 GHC.Types.IO)
                                                               $dMonad :: GHC.Base.Monad
                                                                            GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT @ Main.Pagina
                                        @ GHC.Types.IO
                                        $dFunctor
                                        $dMonad
  = Main.$s$fApplicativeWidgetT
"SPEC/Main $fApplicativeWidgetT_$c*> @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                   (Yesod.Core.Types.WidgetT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$c*> @ Main.Pagina
                                             @ GHC.Types.IO
                                             $dFunctor
                                             $dMonad
  = Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*>
"SPEC/Main $fApplicativeWidgetT_$c<* @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                   (Yesod.Core.Types.WidgetT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$c<* @ Main.Pagina
                                             @ GHC.Types.IO
                                             $dFunctor
                                             $dMonad
  = Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<*
"SPEC/Main $fApplicativeWidgetT_$cpure @ Pagina @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                     (Yesod.Core.Types.WidgetT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
                                                                      $dMonad :: GHC.Base.Monad
                                                                                   GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$cpure @ Main.Pagina
                                               @ GHC.Types.IO
                                               $dFunctor
                                               $dMonad
  = Main.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
"SPEC/Main $fFunctorLoggingT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                GHC.Types.IO
  Control.Monad.Logger.$fFunctorLoggingT @ GHC.Types.IO $dMonad
  = Main.$s$fApplicativeLoggingT_$s$fFunctorLoggingT
"SPEC/Main $fFunctorNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                 GHC.Types.IO)
  Control.Monad.Logger.$fFunctorNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                GHC.Types.IO)
                                           $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT
"SPEC/Main $fFunctorReaderT _ @ (HandlerT Pagina IO)" [ALWAYS] forall @ r
                                                                      $dFunctor :: GHC.Base.Functor
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT @ r
                                              @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                                              $dFunctor
  = Main.$fYesodPersistPagina_$s$fFunctorReaderT @ r
"SPEC/Main $fFunctorReaderT_$cfmap _ @ (HandlerT Pagina IO)" [ALWAYS] forall @ r
                                                                             $dFunctor :: GHC.Base.Functor
                                                                                            (Yesod.Core.Types.HandlerT
                                                                                               Main.Pagina
                                                                                               GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ r
                                                     @ (Yesod.Core.Types.HandlerT
                                                          Main.Pagina GHC.Types.IO)
                                                     $dFunctor
  = Main.$fYesodPersistPagina_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Main $fMonadBaseControlbHandlerT @ IO @ Pagina @ IO" [ALWAYS] forall $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                            GHC.Types.IO
                                                                                            (Yesod.Core.Types.HandlerT
                                                                                               Main.Pagina
                                                                                               GHC.Types.IO)
                                                                           $dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                   GHC.Types.IO
                                                                                                   GHC.Types.IO
  Yesod.Core.Types.$fMonadBaseControlbHandlerT @ GHC.Types.IO
                                               @ Main.Pagina
                                               @ GHC.Types.IO
                                               $dMonadBase
                                               $dMonadBaseControl
  = Main.$fYesodPersistPagina_$s$fMonadBaseControlbHandlerT
"SPEC/Main $fMonadBaseControlbLoggingT @ IO @ IO" [ALWAYS] forall $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                   GHC.Types.IO
                                                                                   (Control.Monad.Logger.LoggingT
                                                                                      GHC.Types.IO)
                                                                  $dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                          GHC.Types.IO
                                                                                          GHC.Types.IO
  Control.Monad.Logger.$fMonadBaseControlbLoggingT @ GHC.Types.IO
                                                   @ GHC.Types.IO
                                                   $dMonadBase
                                                   $dMonadBaseControl
  = Main.$s$fMonadBaseControlbLoggingT
"SPEC/Main $fMonadBasebHandlerT @ IO @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                       GHC.Types.IO
                                                                    $dApplicative1 :: GHC.Base.Applicative
                                                                                        (Yesod.Core.Types.HandlerT
                                                                                           Main.Pagina
                                                                                           GHC.Types.IO)
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO
                                                                    $dMonad1 :: GHC.Base.Monad
                                                                                  (Yesod.Core.Types.HandlerT
                                                                                     Main.Pagina
                                                                                     GHC.Types.IO)
                                                                    $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                     GHC.Types.IO
                                                                                     GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT @ GHC.Types.IO
                                        @ Main.Pagina
                                        @ GHC.Types.IO
                                        $dApplicative
                                        $dApplicative1
                                        $dMonad
                                        $dMonad1
                                        $dMonadBase
  = Main.$fYesodPagina_$s$fMonadBasebHandlerT
"SPEC/Main $fMonadBasebHandlerT_$cliftBase @ IO @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                  GHC.Types.IO
                                                                               $dApplicative1 :: GHC.Base.Applicative
                                                                                                   (Yesod.Core.Types.HandlerT
                                                                                                      Main.Pagina
                                                                                                      GHC.Types.IO)
                                                                               $dMonad :: GHC.Base.Monad
                                                                                            GHC.Types.IO
                                                                               $dMonad1 :: GHC.Base.Monad
                                                                                             (Yesod.Core.Types.HandlerT
                                                                                                Main.Pagina
                                                                                                GHC.Types.IO)
                                                                               $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                GHC.Types.IO
                                                                                                GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT_$cliftBase @ GHC.Types.IO
                                                   @ Main.Pagina
                                                   @ GHC.Types.IO
                                                   $dApplicative
                                                   $dApplicative1
                                                   $dMonad
                                                   $dMonad1
                                                   $dMonadBase
  = Main.$fYesodPagina_$s$fMonadBasebHandlerT_$cliftBase
"SPEC/Main $fMonadBasebLoggingT @ IO @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                              GHC.Types.IO
                                                           $dApplicative1 :: GHC.Base.Applicative
                                                                               (Control.Monad.Logger.LoggingT
                                                                                  GHC.Types.IO)
                                                           $dMonad :: GHC.Base.Monad GHC.Types.IO
                                                           $dMonad1 :: GHC.Base.Monad
                                                                         (Control.Monad.Logger.LoggingT
                                                                            GHC.Types.IO)
                                                           $dMonadBase :: Control.Monad.Base.MonadBase
                                                                            GHC.Types.IO
                                                                            GHC.Types.IO
  Control.Monad.Logger.$fMonadBasebLoggingT @ GHC.Types.IO
                                            @ GHC.Types.IO
                                            $dApplicative
                                            $dApplicative1
                                            $dMonad
                                            $dMonad1
                                            $dMonadBase
  = Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT
"SPEC/Main $fMonadBasebLoggingT_$cliftBase @ IO @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                         GHC.Types.IO
                                                                      $dApplicative1 :: GHC.Base.Applicative
                                                                                          (Control.Monad.Logger.LoggingT
                                                                                             GHC.Types.IO)
                                                                      $dMonad :: GHC.Base.Monad
                                                                                   GHC.Types.IO
                                                                      $dMonad1 :: GHC.Base.Monad
                                                                                    (Control.Monad.Logger.LoggingT
                                                                                       GHC.Types.IO)
                                                                      $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                       GHC.Types.IO
                                                                                       GHC.Types.IO
  Control.Monad.Logger.$fMonadBasebLoggingT_$cliftBase @ GHC.Types.IO
                                                       @ GHC.Types.IO
                                                       $dApplicative
                                                       $dApplicative1
                                                       $dMonad
                                                       $dMonad1
                                                       $dMonadBase
  = Main.$s$fMonadBaseControlbLoggingT_$s$fMonadBasebLoggingT_$cliftBase
"SPEC/Main $fMonadBasebWidgetT @ IO @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                      GHC.Types.IO
                                                                   $dApplicative1 :: GHC.Base.Applicative
                                                                                       (Yesod.Core.Types.WidgetT
                                                                                          Main.Pagina
                                                                                          GHC.Types.IO)
                                                                   $dMonad :: GHC.Base.Monad
                                                                                GHC.Types.IO
                                                                   $dMonad1 :: GHC.Base.Monad
                                                                                 (Yesod.Core.Types.WidgetT
                                                                                    Main.Pagina
                                                                                    GHC.Types.IO)
                                                                   $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                    GHC.Types.IO
                                                                                    GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebWidgetT @ GHC.Types.IO
                                       @ Main.Pagina
                                       @ GHC.Types.IO
                                       $dApplicative
                                       $dApplicative1
                                       $dMonad
                                       $dMonad1
                                       $dMonadBase
  = Main.$s$fMonadBasebWidgetT
"SPEC/Main $fMonadHandlerHandlerT @ Pagina @ IO" [ALWAYS] forall $dMonadResource :: Control.Monad.Trans.Resource.Internal.MonadResource
                                                                                      (Yesod.Core.Types.HandlerT
                                                                                         Main.Pagina
                                                                                         GHC.Types.IO)
                                                                 tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                          GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadHandlerHandlerT @ Main.Pagina
                                                  @ GHC.Types.IO
                                                  $dMonadResource
                                                  tup
  = Main.$fYesodPagina_$s$fMonadHandlerHandlerT
"SPEC/Main $fMonadHandlerT @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                             (Yesod.Core.Types.HandlerT
                                                                                Main.Pagina
                                                                                GHC.Types.IO)
                                                          $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fMonadHandlerT @ Main.Pagina
                                   @ GHC.Types.IO
                                   $dApplicative
                                   $dMonad
  = Main.$fYesodPagina_$s$fMonadHandlerT
"SPEC/Main $fMonadHandlerWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonadResource :: Control.Monad.Trans.Resource.Internal.MonadResource
                                                                                     (Yesod.Core.Types.WidgetT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
                                                                tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                         GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadHandlerWidgetT @ Main.Pagina
                                                 @ GHC.Types.IO
                                                 $dMonadResource
                                                 tup
  = Main.$s$fMonadHandlerWidgetT
"SPEC/Main $fMonadIOHandlerT @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                         (Yesod.Core.Types.HandlerT
                                                                            Main.Pagina
                                                                            GHC.Types.IO)
                                                            $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                           GHC.Types.IO
  Yesod.Core.Types.$fMonadIOHandlerT @ Main.Pagina
                                     @ GHC.Types.IO
                                     $dMonad
                                     $dMonadIO
  = Main.$fYesodPagina_$s$fMonadIOHandlerT
"SPEC/Main $fMonadIOLoggingT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                (Control.Monad.Logger.LoggingT
                                                                   GHC.Types.IO)
                                                   $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                  GHC.Types.IO
  Control.Monad.Logger.$fMonadIOLoggingT @ GHC.Types.IO
                                         $dMonad
                                         $dMonadIO
  = Main.$s$fMonadIOLoggingT
"SPEC/Main $fMonadIONoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                              (Control.Monad.Logger.NoLoggingT
                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                    GHC.Types.IO))
                                                                 $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                   GHC.Types.IO)
  Control.Monad.Logger.$fMonadIONoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                GHC.Types.IO)
                                           $dMonad
                                           $dMonadIO
  = Main.$s$fMonadIONoLoggingT
"SPEC/Main $fMonadIOWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                        (Yesod.Core.Types.WidgetT
                                                                           Main.Pagina GHC.Types.IO)
                                                           $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                          GHC.Types.IO
  Yesod.Core.Types.$fMonadIOWidgetT @ Main.Pagina
                                    @ GHC.Types.IO
                                    $dMonad
                                    $dMonadIO
  = Main.$s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT
"SPEC/Main $fMonadLoggerLoggingT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                    (Control.Monad.Logger.LoggingT
                                                                       GHC.Types.IO)
                                                       $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                      GHC.Types.IO
  Control.Monad.Logger.$fMonadLoggerLoggingT @ GHC.Types.IO
                                             $dMonad
                                             $dMonadIO
  = Main.$s$fMonadLoggerLoggingT
"SPEC/Main $fMonadLoggerLoggingT_$cmonadLoggerLog @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                     (Control.Monad.Logger.LoggingT
                                                                                        GHC.Types.IO)
                                                                        $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                       GHC.Types.IO
  Control.Monad.Logger.$fMonadLoggerLoggingT_$cmonadLoggerLog @ GHC.Types.IO
                                                              $dMonad
                                                              $dMonadIO
  = Main.$s$fMonadLoggerLoggingT_$s$fMonadLoggerLoggingT_$cmonadLoggerLog
"SPEC/Main $fMonadLoggingT @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                    (Control.Monad.Logger.LoggingT
                                                                       GHC.Types.IO)
                                                 $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Logger.$fMonadLoggingT @ GHC.Types.IO
                                       $dApplicative
                                       $dMonad
  = Main.$s$fMonadBaseControlbLoggingT_$s$fMonadLoggingT
"SPEC/Main $fMonadNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                  (Control.Monad.Logger.NoLoggingT
                                                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                        GHC.Types.IO))
                                                               $dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                               GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                              GHC.Types.IO)
                                         $dApplicative
                                         $dMonad
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT
"SPEC/Main $fMonadNoLoggingT_$c>> @ (ResourceT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                       (Control.Monad.Logger.NoLoggingT
                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                             GHC.Types.IO))
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                    GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT_$c>> @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   GHC.Types.IO)
                                              $dApplicative
                                              $dMonad
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>
"SPEC/Main $fMonadReaderT @ SqlBackend @ (HandlerT Pagina IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                  (Control.Monad.Trans.Reader.ReaderT
                                                                                                     Database.Persist.Sql.Types.SqlBackend
                                                                                                     (Yesod.Core.Types.HandlerT
                                                                                                        Main.Pagina
                                                                                                        GHC.Types.IO))
                                                                               $dMonad :: GHC.Base.Monad
                                                                                            (Yesod.Core.Types.HandlerT
                                                                                               Main.Pagina
                                                                                               GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT @ Database.Persist.Sql.Types.SqlBackend
                                            @ (Yesod.Core.Types.HandlerT Main.Pagina GHC.Types.IO)
                                            $dApplicative
                                            $dMonad
  = Main.$fYesodPersistPagina_$s$fMonadReaderT
"SPEC/Main $fMonadReaderT_$cfail @ SqlBackend @ (HandlerT Pagina IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                                            Database.Persist.Sql.Types.SqlBackend
                                                                                                            (Yesod.Core.Types.HandlerT
                                                                                                               Main.Pagina
                                                                                                               GHC.Types.IO))
                                                                                      $dMonad :: GHC.Base.Monad
                                                                                                   (Yesod.Core.Types.HandlerT
                                                                                                      Main.Pagina
                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ Database.Persist.Sql.Types.SqlBackend
                                                   @ (Yesod.Core.Types.HandlerT
                                                        Main.Pagina GHC.Types.IO)
                                                   $dApplicative
                                                   $dMonad
  = Main.$fYesodPersistPagina_$s$fMonadReaderT_$cfail
"SPEC/Main $fMonadResourceHandlerT @ Pagina @ IO" [ALWAYS] forall $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                    (Yesod.Core.Types.HandlerT
                                                                                       Main.Pagina
                                                                                       GHC.Types.IO)
                                                                  $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                 (Yesod.Core.Types.HandlerT
                                                                                    Main.Pagina
                                                                                    GHC.Types.IO)
                                                                  $dApplicative :: GHC.Base.Applicative
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
                                                                  $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                   GHC.Types.IO
                                                                                   (Yesod.Core.Types.HandlerT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                                  $dMonadIO1 :: Control.Monad.IO.Class.MonadIO
                                                                                  GHC.Types.IO
                                                                  $dMonadBase1 :: Control.Monad.Base.MonadBase
                                                                                    GHC.Types.IO
                                                                                    GHC.Types.IO
                                                                  $dMonadThrow1 :: Control.Monad.Catch.MonadThrow
                                                                                     GHC.Types.IO
  Yesod.Core.Types.$fMonadResourceHandlerT @ Main.Pagina
                                           @ GHC.Types.IO
                                           $dMonadThrow
                                           $dMonadIO
                                           $dApplicative
                                           $dMonadBase
                                           $dMonadIO1
                                           $dMonadBase1
                                           $dMonadThrow1
  = Main.$fYesodPagina_$s$fMonadResourceHandlerT
"SPEC/Main $fMonadResourceWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                   (Yesod.Core.Types.WidgetT
                                                                                      Main.Pagina
                                                                                      GHC.Types.IO)
                                                                 $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                (Yesod.Core.Types.WidgetT
                                                                                   Main.Pagina
                                                                                   GHC.Types.IO)
                                                                 $dApplicative :: GHC.Base.Applicative
                                                                                    (Yesod.Core.Types.WidgetT
                                                                                       Main.Pagina
                                                                                       GHC.Types.IO)
                                                                 $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                  GHC.Types.IO
                                                                                  (Yesod.Core.Types.WidgetT
                                                                                     Main.Pagina
                                                                                     GHC.Types.IO)
                                                                 $dApplicative1 :: GHC.Base.Applicative
                                                                                     GHC.Types.IO
                                                                 $dMonadIO1 :: Control.Monad.IO.Class.MonadIO
                                                                                 GHC.Types.IO
                                                                 $dMonadBase1 :: Control.Monad.Base.MonadBase
                                                                                   GHC.Types.IO
                                                                                   GHC.Types.IO
                                                                 $dMonadThrow1 :: Control.Monad.Catch.MonadThrow
                                                                                    GHC.Types.IO
  Yesod.Core.Types.$fMonadResourceWidgetT @ Main.Pagina
                                          @ GHC.Types.IO
                                          $dMonadThrow
                                          $dMonadIO
                                          $dApplicative
                                          $dMonadBase
                                          $dApplicative1
                                          $dMonadIO1
                                          $dMonadBase1
                                          $dMonadThrow1
  = Main.$s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT
"SPEC/Main $fMonadThrowHandlerT @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                            (Yesod.Core.Types.HandlerT
                                                                               Main.Pagina
                                                                               GHC.Types.IO)
                                                               $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                 GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT @ Main.Pagina
                                        @ GHC.Types.IO
                                        $dMonad
                                        $dMonadThrow
  = Main.$fYesodPagina_$s$fMonadThrowHandlerT
"SPEC/Main $fMonadThrowHandlerT_$cthrowM @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.Pagina
                                                                                        GHC.Types.IO)
                                                                        $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                          GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT_$cthrowM @ Main.Pagina
                                                 @ GHC.Types.IO
                                                 $dMonad
                                                 $dMonadThrow
  = Main.$fYesodPagina_$s$fMonadThrowHandlerT_$cthrowM
"SPEC/Main $fMonadThrowWidgetT @ Pagina @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                           (Yesod.Core.Types.WidgetT
                                                                              Main.Pagina
                                                                              GHC.Types.IO)
                                                              $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowWidgetT @ Main.Pagina
                                       @ GHC.Types.IO
                                       $dMonad
                                       $dMonadThrow
  = Main.$s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT
"SPEC/Main $fMonadWidgetT @ Pagina @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                            (Yesod.Core.Types.WidgetT
                                                                               Main.Pagina
                                                                               GHC.Types.IO)
                                                         $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fMonadWidgetT @ Main.Pagina
                                  @ GHC.Types.IO
                                  $dApplicative
                                  $dMonad
  = Main.$s$fMonadBasebWidgetT_$s$fMonadWidgetT
"SPEC/Main fromList @ Text" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                       Data.Text.Internal.Text
  Data.Set.Base.fromList @ Data.Text.Internal.Text $dOrd
  = Main.$fRouteAttrsPagina_$sfromList
"SPEC/Main readListDefault @ (Key Users)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      (Database.Persist.Class.PersistEntity.Key
                                                                         Main.Users)
  GHC.Read.readListDefault @ (Database.Persist.Class.PersistEntity.Key
                                Main.Users)
                           $dRead
  = Main.$fReadKey_$sreadListDefault
"SPEC/Main readListDefault @ (Route Pagina)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         (Yesod.Routes.Class.Route
                                                                            Main.Pagina)
  GHC.Read.readListDefault @ (Yesod.Routes.Class.Route Main.Pagina)
                           $dRead
  = Main.$fReadRoute_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

